/*
TAP Tests for constraints 
*/

BEGIN;

SELECT tap.plan(127);

-- setup for tests
DROP DATABASE IF EXISTS taptest;
CREATE DATABASE taptest;
USE taptest; 

-- This will be rolled back. :-)

DROP TABLE IF EXISTS taptest.fktab;
CREATE TABLE taptest.fktab(
    id      INT NOT NULL PRIMARY KEY,
    name    TEXT
) ENGINE=INNODB, CHARACTER SET utf8, COLLATE utf8_general_ci;

DROP TABLE IF EXISTS taptest.sometab;
CREATE TABLE taptest.sometab(
    id        INT NOT NULL PRIMARY KEY,
    uniqueNum INT NULL,
    fktabid   INT NULL,
    UNIQUE `uniq_key` (uniqueNum),
    CONSTRAINT  `fktab_fk` FOREIGN KEY (fktabid) REFERENCES fktab(id) ON DELETE CASCADE ON UPDATE NO ACTION
) ENGINE=INNODB, CHARACTER SET utf8, COLLATE utf8_general_ci;

DROP TABLE IF EXISTS taptest.nopk;
CREATE TABLE taptest.nopk(
    id      INT,
    name    TEXT
) ENGINE=INNODB, CHARACTER SET utf8, COLLATE utf8_general_ci;

DROP TABLE IF EXISTS taptest.multipk;
CREATE TABLE taptest.multipk(
    idone INT,
    idtwo INT,
    PRIMARY KEY (idone,idtwo)
) ENGINE=INNODB, CHARACTER SET utf8, COLLATE utf8_general_ci;

DROP TABLE IF EXISTS taptest.multiunique;
CREATE TABLE taptest.multiunique(
    id INT PRIMARY KEY,
    idone INT,
    idtwo INT,
    UNIQUE KEY `muniq_key` (idone,idtwo),
    CONSTRAINT multi_fk FOREIGN KEY(idone,idtwo) REFERENCES multipk(idone,idtwo)
) ENGINE=INNODB, CHARACTER SET utf8, COLLATE utf8_general_ci;



/****************************************************************************/
-- has_constraint(sname VARCHAR(64), tname VARCHAR(64), cname VARCHAR(64), description TEXT)

SELECT tap.check_test(
    tap.has_constraint('taptest', 'sometab', 'fktab_fk', ''),
    true,
    'has_constraint() extant constraint',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.has_constraint('taptest', 'sometab', 'nonexistent', ''),
    false,
    'has_constraint() nonexistent constraint',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.has_constraint('taptest', 'sometab', 'fktab_fk', ''),
    true,
    'has_constraint() default description',
    'Constraint sometab.fktab_fk should exist',
    null,
    0
);

SELECT tap.check_test(
    tap.has_constraint('taptest', 'sometab', 'fktab_fk', 'desc'),
    true,
    'has_constraint() description supplied',
    'desc',
    null,
    0
);

SELECT tap.check_test(
    tap.has_constraint('taptest', 'nonexistent', 'nonexistent', ''),
    false,
    'has_constraint() Table not found diagnostic',
    null,
    'Table taptest.nonexistent does not exist',
    0
);


/****************************************************************************/
-- hasnt_constraint(sname VARCHAR(64), tname VARCHAR(64), cname VARCHAR(64), description TEXT)

SELECT tap.check_test(
    tap.hasnt_constraint('taptest', 'sometab', 'nonexistent', ''),
    true,
    'hasnt_constraint() extant constraint',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.hasnt_constraint('taptest', 'sometab', 'fktab_fk', ''),
    false,
    'hasnt_constraint() nonexistent constraint',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.hasnt_constraint('taptest', 'sometab', 'nonexistent', ''),
    true,
    'hasnt_constraint() default description',
    'Constraint sometab.nonexistent should not exist',
    null,
    0
);

SELECT tap.check_test(
    tap.hasnt_constraint('taptest', 'sometab', 'nonexistent', 'desc'),
    true,
    'hasnt_constraint() description supplied',
    'desc',
    null,
    0
);

SELECT tap.check_test(
    tap.hasnt_constraint('taptest', 'nonexistent', 'nonexistent', ''),
    false,
    'hasnt_constraint() Table not found diagnostic',
    null,
    'Table taptest.nonexistent does not exist',
    0
);


/****************************************************************************/
-- has_pk(sname VARCHAR(64), tname VARCHAR(64), description TEXT)


SELECT tap.check_test(
    tap.has_pk('taptest', 'sometab', ''),
    true,
    'has_pk() extant constraint',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.has_pk('taptest', 'nopk', ''),
    false,
    'has_pk() nonexistent constraint',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.has_pk('taptest', 'sometab', ''),
    true,
    'has_pk() default description',
    'Table taptest.sometab should have a PRIMARY KEY',
    null,
    0
);

SELECT tap.check_test(
    tap.has_pk('taptest', 'sometab', 'desc'),
    true,
    'has_pk() description supplied',
    'desc',
    null,
    0
);

SELECT tap.check_test(
    tap.has_pk('taptest', 'nonexistent', ''),
    false,
    'has_pk() Table not found diagnostic',
    null,
    'Table taptest.nonexistent does not exist',
    0
);



/****************************************************************************/
-- hasnt_pk(sname VARCHAR(64), tname VARCHAR(64), description TEXT)

SELECT tap.check_test(
    tap.hasnt_pk('taptest', 'nopk', ''),
    true,
    'hasnt_pk() extant constraint',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.hasnt_pk('taptest', 'sometab', ''),
    false,
    'hasnt_pk() nonexistent constraint',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.hasnt_pk('taptest', 'nopk', ''),
    true,
    'hasnt_pk() default description',
    'Table taptest.nopk should not have a PRIMARY KEY',
    null,
    0
);

SELECT tap.check_test(
    tap.hasnt_pk('taptest', 'nopk', 'desc'),
    true,
    'hasnt_pk() description supplied',
    'desc',
    null,
    0
);

SELECT tap.check_test(
    tap.hasnt_pk('taptest', 'nonexistent', ''),
    false,
    'hasnt_pk() Table not found diagnostic',
    null,
    'Table taptest.nonexistent does not exist',
    0
);


/****************************************************************************/
-- has_fk(sname VARCHAR(64), tname VARCHAR(64), description TEXT)

SELECT tap.check_test(
    tap.has_fk('taptest', 'sometab', ''),
    true,
    'has_fk() extant constraint',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.has_fk('taptest', 'fktab', ''),
    false,
    'has_fk() nonexistent constraint',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.has_fk('taptest', 'sometab', ''),
    true,
    'has_fk() default description',
    'Table taptest.sometab should have a FOREIGN KEY',
    null,
    0
);

SELECT tap.check_test(
    tap.has_fk('taptest', 'sometab', 'desc'),
    true,
    'has_fk() description supplied',
    'desc',
    null,
    0
);

SELECT tap.check_test(
    tap.has_fk('taptest', 'nonexistent', ''),
    false,
    'has_fk() Table not found diagnostic',
    null,
    'Table taptest.nonexistent does not exist',
    0
);


/****************************************************************************/
-- hasnt_fk(sname VARCHAR(64), tname VARCHAR(64), description TEXT)


SELECT tap.check_test(
    tap.hasnt_fk('taptest', 'fktab', ''),
    true,
    'hasnt_fk() extant constraint',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.hasnt_fk('taptest', 'sometab', ''),
    false,
    'hasnt_fk() nonexistent constraint',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.hasnt_fk('taptest', 'nopk', ''),
    true,
    'hasnt_fk() default description',
    'Table taptest.nopk should not have a FOREIGN KEY',
    null,
    0
);

SELECT tap.check_test(
    tap.hasnt_fk('taptest', 'fktab', 'desc'),
    true,
    'hasnt_fk() description supplied',
    'desc',
    null,
    0
);

SELECT tap.check_test(
    tap.hasnt_fk('taptest', 'nonexistent', ''),
    false,
    'hasnt_fk() Table not found diagnostic',
    null,
    'Table taptest.nonexistent does not exist',
    0
);



/****************************************************************************/
-- col_is_unique(sname VARCHAR(64), tname VARCHAR(64), want TEXT, description TEXT)
-- This can be a single column or a list of columns, must be in the order of the INDEX

SELECT tap.check_test(
    tap.col_is_unique('taptest', 'sometab', '`uniquenum`', ''),
    true,
    'col_is_unique() UNIQUE constraint',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.col_is_unique('taptest', 'sometab', 'id', ''),
    true,
    'col_is_unique() unique constraint on PK',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.col_is_unique('taptest', 'sometab', 'fktabid', ''),
    false,
    'col_is_unique() unique constraint on non-unique',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.col_is_unique('taptest', 'multipk', '`idone`,`idtwo`', ''),
    true,
    'col_is_unique() unique constraint multi PK cols',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.col_is_unique('taptest', 'multiunique', '`idone`,`idtwo`', ''),
    true,
    'col_is_unique() unique constraint multi cols',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.col_is_unique('taptest', 'multiunique', '`idone`,`idtwo`', ''),
    true,
    'col_is_unique() default description',
    'Unique Index for taptest.multiunique should exist on `idone`,`idtwo`',
    null,
    0
);

SELECT tap.check_test(
    tap.col_is_unique('taptest', 'sometab', 'uniquenum', 'desc'),
    true,
    'col_is_unique() description supplied',
    'desc',
    null,
    0
);

SELECT tap.check_test(
    tap.col_is_unique('taptest', 'nonexistent', 'uniquenum', ''),
    false,
    'col_is_unique() Table not found diagnostic',
    null,
    'Table taptest.nonexistent does not exist',
    0
);


/****************************************************************************/
-- col_is_pk(sname VARCHAR(64), tname VARCHAR(64), want TEXT, description TEXT)
-- This can be a single column or a list of columns, must be in the order of the PK


SELECT tap.check_test(
    tap.col_is_pk('taptest', 'sometab', 'id', ''),
    true,
    'col_is_pk() PK constraint single key',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.col_is_pk('taptest', 'multipk', '`idone`,`idtwo`', ''),
    true,
    'col_is_pk() PK constraint multiple key',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.col_is_pk('taptest', 'nopk', 'id', ''),
    false,
    'col_is_pk() nonexistent constraint single col',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.col_is_pk('taptest', 'sometab', 'id', ''),
    true,
    'col_is_pk() default description',
    'Primary Key for taptest.sometab should exist on `id`',
    null,
    0
);

SELECT tap.check_test(
    tap.col_is_pk('taptest', 'multipk', '`idone`,`idtwo`', ''),
    true,
    'col_is_pk() default description',
    'Primary Key for taptest.multipk should exist on `idone`,`idtwo`',
    null,
    0
);

SELECT tap.check_test(
    tap.col_is_pk('taptest', 'sometab', 'id', 'desc'),
    true,
    'col_is_pk() description supplied',
    'desc',
    null,
    0
);

SELECT tap.check_test(
    tap.col_is_pk('taptest', 'nonexistent', 'nocol', ''),
    false,
    'col_is_pk() Table not found diagnostic',
    null,
    'Table taptest.nonexistent does not exist',
    0
);



/****************************************************************************/
-- has_unique(sname VARCHAR(64), tname VARCHAR(64), description TEXT)

SELECT tap.check_test(
    tap.has_unique('taptest', 'sometab', ''),
    true,
    'has_unique() extant constraint',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.has_unique('taptest', 'uniquetab', ''),
    false,
    'has_unique() nonexistent constraint',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.has_unique('taptest', 'sometab', ''),
    true,
    'has_unique() default description',
    'Table taptest.sometab should have a UNIQUE INDEX',
    null,
    0
);

SELECT tap.check_test(
    tap.has_unique('taptest', 'sometab', 'desc'),
    true,
    'has_unique() description supplied',
    'desc',
    null,
    0
);

SELECT tap.check_test(
    tap.has_unique('taptest', 'nonexistent', ''),
    false,
    'has_unique() Table not found diagnostic',
    null,
    'Table taptest.nonexistent does not exist',
    0
);


/****************************************************************************/
-- constraint_type_is(sname VARCHAR(64), tname VARCHAR(64), cname VARCHAR(64), ctype VARCHAR(64), description TEXT)

SELECT tap.check_test(
    tap.constraint_type_is('taptest', 'sometab', 'PRIMARY', 'PRIMARY KEY', ''),
    true,
    'constraint_type_is() with correct specification single PK',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.constraint_type_is('taptest', 'sometab', 'PRIMARY', 'FOREIGN KEY', ''),
    false,
    'constraint_type_is() with incorrect specification',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.constraint_type_is('taptest', 'multipk', 'PRIMARY', 'PRIMARY KEY', ''),
    true,
    'constraint_type_is() with correct specification multiple PK',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.constraint_type_is('taptest', 'sometab', 'uniq_key', 'UNIQUE', ''),
    true,
    'constraint_type_is() with UNIQUE constraint',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.constraint_type_is('taptest', 'multiunique', 'muniq_key', 'UNIQUE', ''),
    true,
    'constraint_type_is() multi-col UNIQUE constraint',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.constraint_type_is('taptest', 'sometab', 'fktab_fk', 'FOREIGN KEY', ''),
    true,
    'constraint_type_is() with FK constraint',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.constraint_type_is('taptest', 'sometab', 'fktab_fk', 'FOREIGN KEY', ''),
    true,
    'constraint_type_is() default description',
    'Constraint sometab.fktab_fk should have Constraint Type \'FOREIGN KEY\'',
    null,
    0
);

SELECT tap.check_test(
    tap.constraint_type_is('taptest', 'sometab', 'fktab_fk', 'FOREIGN KEY', 'desc'),
    true,
    'constraint_type_is() description supplied',
    'desc',
    null,
    0
);

SELECT tap.check_test(
    tap.constraint_type_is('taptest', 'sometab', 'nonexistent', 'FOREIGN KEY' , ''),
    false,
    'constraint_type_is() constraint not found diagnostic',
    null,
    'Constraint sometab.nonexistent does not exist',
    0
);


/****************************************************************************/
-- fk_on_delete(sname VARCHAR(64), tname VARCHAR(64), cname VARCHAR(64), rule VARCHAR(64), description TEXT)

SELECT tap.check_test(
    tap.fk_on_delete('taptest', 'sometab', 'fktab_fk', 'CASCADE', ''),
    true,
    'fk_on_delete() with correct specification',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.fk_on_delete('taptest', 'sometab', 'fktab_fk', 'NO ACTION', ''),
    false,
    'fk_on_delete() with incorrect specification',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.fk_on_delete('taptest', 'sometab', 'fktab_fk', 'CASCADE', ''),
    true,
    'fk_on_delete() default description',
    'Constraint sometab.fktab_fk should have rule ON DELETE \'CASCADE\'',
    null,
    0
);

SELECT tap.check_test(
    tap.fk_on_delete('taptest', 'sometab', 'fktab_fk', 'CASCADE', 'desc'),
    true,
    'fk_on_delete() description supplied',
    'desc',
    null,
    0
);

SELECT tap.check_test(
    tap.fk_on_delete('taptest', 'sometab', 'nonexistent', 'CASCADE' , ''),
    false,
    'fk_on_delete() constraint not found diagnostic',
    null,
    'Constraint sometab.nonexistent does not exist',
    0
);



/****************************************************************************/
-- fk_on_update(sname VARCHAR(64), tname VARCHAR(64), cname VARCHAR(64), rule VARCHAR(64), description TEXT)

SELECT tap.check_test(
    tap.fk_on_update('taptest', 'sometab', 'fktab_fk', 'NO ACTION', ''),
    true,
    'fk_on_update() with correct specification',
    null,
    null,
    0
);


SELECT tap.check_test(
    tap.fk_on_update('taptest', 'sometab', 'fktab_fk', 'CASCADE', ''),
    false,
    'fk_on_update() with incorrect specification',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.fk_on_update('taptest', 'sometab', 'fktab_fk', 'NO ACTION', ''),
    true,
    'fk_on_update() default description',
    'Constraint sometab.fktab_fk should have rule ON UPDATE \'NO ACTION\'',
    null,
    0
);

SELECT tap.check_test(
    tap.fk_on_update('taptest', 'sometab', 'fktab_fk', 'NO ACTION', 'desc'),
    true,
    'fk_on_update() description supplied',
    'desc',
    null,
    0
);

SELECT tap.check_test(
    tap.fk_on_update('taptest', 'sometab', 'nonexistent', 'NO ACTION' , ''),
    false,
    'fk_on_update() constraint not found diagnostic',
    null,
    'Constraint sometab.nonexistent does not exist',
    0
);


/****************************************************************************/
-- fk_ok(csch VARCHAR(64), ctab VARCHAR(64), ccol TEXT, utab VARCHAR(64), ucol TEXT, description TEXT);
-- Key in table 1 points to FK in table 2

SELECT tap.check_test(
    tap.fk_ok('taptest', 'sometab', 'fktabid', 'taptest', 'fktab', 'id', ''),
    true,
    'fk_ok() with correct specification',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.fk_ok('taptest', 'multiunique', '`idone`,`idtwo`', 'taptest', 'multipk', '`idone`,`idtwo`', ''),
    true,
    'fk_ok() with correct specification multiple cols',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.fk_ok('taptest', 'sometab', 'fktabid', 'taptest', 'fktab', 'name', ''),
    false,
    'fk_ok() with incorrect specification',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.fk_ok('taptest', 'sometab', 'fktabid', 'taptest', 'fktab', 'id', ''),
    true,
    'fk_ok() default description',
    'Constraint Foreign Key sometab(`fktabid`) should reference fktab(`id`)',
    null,
    0
);

SELECT tap.check_test(
    tap.fk_ok('taptest', 'sometab', 'fktabid', 'taptest', 'fktab', 'id', 'desc'),
    true,
    'fk_ok() description supplied',
    'desc',
    null,
    0
);

SELECT tap.check_test(
    tap.fk_ok('taptest', 'nonexistent', 'fktabid', 'taptest', 'fktab' , 'id', ''),
    false,
    'fk_ok() table 1 not found diagnostic',
    null,
    'Table taptest.nonexistent does not exist',
    0
);

SELECT tap.check_test(
    tap.fk_ok('taptest', 'sometab', 'fktabid', 'taptest', 'nonexistent' , 'id', ''),
    false,
    'fk_ok() table 2 not found diagnostic',
    null,
    'Table taptest.nonexistent does not exist',
    0
);

/****************************************************************************/
-- constraints_are(sname VARCHAR(64), tname VARCHAR(64),  want TEXT, description TEXT)

SELECT tap.check_test(
    tap.constraints_are('taptest', 'sometab', '`PRIMARY`,`fktab_fk`,`uniq_key`', ''),
    true,
    'constraints_are() correct specification',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.constraints_are('taptest', 'sometab', '`PRIMARY`,`fktab_fk`,`nonexistent`', ''),
    false,
    'constraints_are() incorrect specification',
    null,
    null,
    0
);


-- Note the diagnostic test here is dependent on the space after the hash
-- and before the line feed and the number of spaces before
-- the routine names, which must = 7
SELECT tap.check_test(
    tap.constraints_are('taptest', 'sometab', '`PRIMARY`,`fktab_fk`,`nonexistent`', ''),
    false,
    'constraints_are() diagnostic',
    null,
    '# 
    Extra Constraints:
       `uniq_key`
    Missing Constraints:
       `nonexistent`',
    0
);

SELECT tap.check_test(
    tap.constraints_are('taptest', 'nonexistent', '`PRIMARY`,`fktab_fk`,`uniq_key`', ''),
    false,
    'constraints_are() nonexistent table',
    null,
    'Table taptest.nonexistent does not exist',
    0
);

SELECT tap.check_test(
    tap.constraints_are('taptest', 'sometab', '`PRIMARY`,`fktab_fk`,`uniq_key`', ''),
    true,
    'constraints_are() default description',
    'Table taptest.sometab should have the correct constraints',
    null,
    0
);

SELECT tap.check_test(
    tap.constraints_are('taptest', 'sometab', '`PRIMARY`,`fktab_fk`,`uniq_key`', 'desc'),
    true,
    'constraints_are() description supplied',
    'desc',
    null,
    0
);



/****************************************************************************/

-- Finish the tests and clean up.

call tap.finish();
DROP DATABASE taptest;
ROLLBACK;
