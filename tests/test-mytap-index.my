/*
TAP Tests for indexes 
*/

BEGIN;

SELECT tap.plan(57);

-- setup for tests
DROP DATABASE IF EXISTS taptest;
CREATE DATABASE taptest;

-- This will be rolled back. :-)

DROP TABLE IF EXISTS taptest.sometab;
CREATE TABLE taptest.sometab(
    id   INT NOT NULL PRIMARY KEY,
    col1 INT NULL,
    col2 INT NULL,
    col3 INT NULL,
    KEY `test1_idx` (col1),
    KEY `test2_idx` (col1,col2)
) ENGINE=INNODB, CHARACTER SET utf8, COLLATE utf8_general_ci;



/****************************************************************************/
-- index_is(sname VARCHAR(64), tname VARCHAR(64), iname VARCHAR(64), want TEXT, description TEXT)

SELECT tap.check_test(
    tap.index_is('taptest', 'sometab', 'test1_idx', '`col1`', ''),
    true,
    'index_is() extant index',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.index_is('taptest', 'sometab', 'test2_idx', '`col1`,`col2`', ''),
    true,
    'index_is() extant index multi col',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.index_is('taptest', 'sometab', 'test1_idx', '`col2`', ''),
    false,
    'index_is() incorrect spec wrong column',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.index_is('taptest', 'sometab', 'test2_idx', '`col2`,`col1`', ''),
    false,
    'index_is() incorrect spec wrong column order',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.index_is('taptest', 'sometab', 'nonexistent', '`col2`', ''),
    false,
    'index_is() nonexistent index',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.index_is('taptest', 'sometab', 'nonexistent', '`col2`', ''),
    false,
    'index_is() Index not found diagnostic',
    null,
    'Index sometab.nonexistent does not exist',
    0
);

SELECT tap.check_test(
    tap.index_is('taptest', 'sometab', 'test2_idx', '`col1`,`col2`', ''),
    true,
    'index_is() default description',
    'Index sometab.test2_idx should exist on `col1`,`col2`',
    null,
    0
);

SELECT tap.check_test(
    tap.index_is('taptest', 'sometab', 'test1_idx', '`col1`', 'desc'),
    true,
    'index_is() description supplied',
    'desc',
    null,
    0
);


/****************************************************************************/
-- is_indexed(sname VARCHAR(64), tname VARCHAR(64), want TEXT, description TEXT)


SELECT tap.check_test(
    tap.is_indexed('taptest', 'sometab', '`col1`', ''),
    true,
    'is_indexed() extant index',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.is_indexed('taptest', 'sometab', '`col1`,`col2`', ''),
    true,
    'is_indexed() extant index multi col',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.is_indexed('taptest', 'sometab', '`col3`', ''),
    false,
    'is_indexed() incorrect spec wrong column',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.is_indexed('taptest', 'sometab', '`col2`,`col1`', ''),
    false,
    'is_indexed() incorrect spec wrong column order',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.is_indexed('taptest', 'sometab', '`nonexistent`', ''),
    false,
    'is_indexed() nonexistent column',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.is_indexed('taptest', 'sometab', '`id`', ''),
    true,
    'is_indexed() PRIMARY KEY column',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.is_indexed('taptest', 'nonexistent', '`test1_idx`', ''),
    false,
    'is_indexed() Table not found diagnostic',
    null,
    'Table taptest.nonexistent does not exist',
    0
);

SELECT tap.check_test(
    tap.is_indexed('taptest', 'sometab', '`col1`,`col2`', ''),
    true,
    'is_indexed() default description',
    'Index for taptest.sometab should exist on `col1`,`col2`',
    null,
    0
);

SELECT tap.check_test(
    tap.is_indexed('taptest', 'sometab', '`col1`', 'desc'),
    true,
    'is_indexed() description supplied',
    'desc',
    null,
    0
);


/****************************************************************************/
-- has_index(sname VARCHAR(64), tname VARCHAR(64), iname VARCHAR(64), description TEXT)

SELECT tap.check_test(
    tap.has_index('taptest', 'sometab', 'test1_idx', ''),
    true,
    'has_index() extant index',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.has_index('taptest', 'sometab', 'nonexistent', ''),
    false,
    'has_index() nonexistent index',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.has_index('taptest', 'sometab', 'test2_idx', ''),
    true,
    'has_index() default description',
    'Index sometab.test2_idx should exist',
    null,
    0
);

SELECT tap.check_test(
    tap.has_index('taptest', 'sometab', 'test1_idx', 'desc'),
    true,
    'has_index() description supplied',
    'desc',
    null,
    0
);

SELECT tap.check_test(
    tap.has_index('taptest', 'nonexistent', 'nonexistent', ''),
    false,
    'has_index() Table not found diagnostic',
    null,
    'Table taptest.nonexistent does not exist',
    0
);



/****************************************************************************/
-- hasnt_index(sname VARCHAR(64), tname VARCHAR(64), iname VARCHAR(64), description TEXT)

SELECT tap.check_test(
    tap.hasnt_index('taptest', 'sometab', 'nonexistent', ''),
    true,
    'hasnt_index() nonexistent index',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.hasnt_index('taptest', 'sometab', 'test1_idx', ''),
    false,
    'hasnt_index() extant index',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.hasnt_index('taptest', 'sometab', 'test2_idx', ''),
    false,
    'hasnt_index() default description',
    'Index sometab.test2_idx should not exist',
    null,
    0
);

SELECT tap.check_test(
    tap.hasnt_index('taptest', 'sometab', 'nonexistent', 'desc'),
    true,
    'hasnt_index() description supplied',
    'desc',
    null,
    0
);

SELECT tap.check_test(
    tap.hasnt_index('taptest', 'nonexistent', 'nonexistent', ''),
    false,
    'hasnt_index() Table not found diagnostic',
    null,
    'Table taptest.nonexistent does not exist',
    0
);



/****************************************************************************/
-- index_is_type(sname VARCHAR(64), tname VARCHAR(64), iname VARCHAR(64), itype VARCHAR(64), description TEXT)

SELECT tap.check_test(
    tap.index_is_type('taptest', 'sometab', 'test1_idx', 'BTREE', ''),
    true,
    'index_is_type() correct specification',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.index_is_type('taptest', 'sometab', 'test1_idx', 'HASH', ''),
    false,
    'index_is_type() incorrect specification',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.index_is_type('taptest', 'sometab', 'test1_idx', 'BTREE', ''),
    true,
    'index_is_type() default description',
    'Index sometab.test1_idx should be of Type \'BTREE\'',
    null,
    0
);

SELECT tap.check_test(
    tap.index_is_type('taptest', 'sometab', 'test1_idx', 'BTREE', 'desc'),
    true,
    'index_is_type() description supplied',
    'desc',
    null,
    0
);

SELECT tap.check_test(
    tap.index_is_type('taptest', 'sometab', 'nonexistent', 'BTREE', ''),
    false,
    'index_is_type() Index not found diagnostic',
    null,
    'Index sometab.nonexistent does not exist',
    0
);



/****************************************************************************/
-- indexes_are(sname VARCHAR(64), tname VARCHAR(64),  want TEXT, description TEXT)

SELECT tap.check_test(
    tap.indexes_are('taptest', 'sometab', '`test1_idx`,`test2_idx`', ''),
    true,
    'indexes_are() correct specification',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.indexes_are('taptest', 'sometab', '`test1_idx`,`nonexistent`', ''),
    false,
    'indexes_are() incorrect specification',
    null,
    null,
    0
);

-- Note the diagnostic test here is dependent on the space after the hash
-- and before the line feed and the number of spaces before
-- the routine names, which must = 7
SELECT tap.check_test(
    tap.indexes_are('taptest', 'sometab', '`test1_idx`,`nonexistent`', ''),
    false,
    'indexes_are() diagnostic',
    null,
    '# 
    Extra Indexes:
       `test2_idx`
    Missing Indexes:
       `nonexistent`',
    0
);

SELECT tap.check_test(
    tap.indexes_are('taptest', 'nonexistent', '`test1_idx`,`test2_idx`', ''),
    false,
    'indexes_are() nonexistent table',
    null,
    'Table taptest.nonexistent does not exist',
    0
);

SELECT tap.check_test(
    tap.indexes_are('taptest', 'sometab', '`test1_idx`,`test2_idx`', ''),
    true,
    'indexes_are() default description',
    'Table taptest.sometab should have the correct indexes',
    null,
    0
);

SELECT tap.check_test(
    tap.indexes_are('taptest', 'sometab', '`test1_idx`,`test2_idx`', 'desc'),
    true,
    'indexes_are() description supplied',
    'desc',
    null,
    0
);



/****************************************************************************/

-- Finish the tests and clean up.

call tap.finish();
DROP DATABASE taptest;
ROLLBACK;
