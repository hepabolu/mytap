BEGIN;

SELECT tap.plan(54);
-- SELECT * from no_plan();

DROP DATABASE IF EXISTS taptest;
CREATE DATABASE taptest;

-- This will be rolled back. :-)
DROP TABLE IF EXISTS taptest.sometab;
CREATE TABLE taptest.sometab(
    id      INT NOT NULL PRIMARY KEY,
    name    TEXT,
    numb    FLOAT(10, 2) DEFAULT NULL,
    myNum   INT(8) DEFAULT 24,
    myat    TIMESTAMP DEFAULT NOW(),
    plain   INT
);

DROP VIEW IF EXISTS taptest.myview;
CREATE 
VIEW taptest.myview AS 
SELECT * FROM taptest.sometab;

DROP VIEW IF EXISTS taptest.invokerView;
CREATE SQL SECURITY INVOKER
VIEW taptest.invokerView AS
SELECT plain FROM taptest.sometab;


/****************************************************************************/
-- Test has_view
SELECT tap.check_test(
    tap.has_view('taptest', 'myview', '' ),
    true,
    'has_view( sch, view )',
    'View taptest.myview should exist',
    '',
    ''
);

use taptest;
SELECT tap.check_test(
    tap.has_view( database(), 'myview', ''),
    true,
    'has_view( current database, view )',
    'View taptest.myview should exist',
    '',
    ''
);

use tap;

-- Make sure nonexisting view is correctly detected
SELECT tap.check_test(
    tap.has_view('taptest', 'foo', ''),
    false,
    'has_view( sch, non existing view )',
    'View taptest.foo should exist',
    '',
    ''
);

SELECT tap.check_test(
  tap.has_view('taptest', 'myview', 'my own description'),
  true,
  'has_view( sch, view, descr)',
  'my own description',
  '',
  ''
);

SELECT tap.check_test(
    tap.has_view('taptest', 'sometab', '' ),
    false,
    'has_view( sch, table instead of view )',
    'View taptest.sometab should exist',
    '',
    ''
);


/****************************************************************************/
-- Test hasnt_view
SELECT tap.check_test(
    tap.hasnt_view('taptest', 'foo', '' ),
    true,
    'hasnt_view( sch, non existing view )',
    'View taptest.foo should not exist',
    '',
    ''
);

use taptest;
SELECT tap.check_test(
    tap.hasnt_view( database(), 'foo', '' ),
    true,
    'hasnt_view( current database, non existing view )',
    'View taptest.foo should not exist',
    '',
    ''
);

use tap;

-- Make sure existing view is correctly detected
SELECT tap.check_test(
    tap.hasnt_view('taptest', 'myview', '' ),
    false,
    'hasnt_view( sch, existing view )',
    'View taptest.myview should not exist',
    '',
    ''
);

SELECT tap.check_test(
  tap.hasnt_view('taptest', 'myview', 'my own description'),
  false,
  'hasnt_view( sch, view, descr)',
  'my own description',
  '',
  ''
);

SELECT tap.check_test(
    tap.hasnt_view('taptest', 'sometab', ''),
    true,
    'hasnt_view( sch, table instead of view )',
    'View taptest.sometab should not exist',
    '',
    ''
);

/****************************************************************************/
-- Test has_security_invoker

SELECT tap.check_test(
    tap.has_security_invoker('taptest', 'invokerView', ''),
    true,
    'has_security_invoker( sch, view )',
    'View taptest.invokerView should have security INVOKER',
    '',
    ''
);

SELECT tap.check_test(
    tap.has_security_invoker('taptest', 'invokerView', 'desc'),
    true,
    'has_security_invoker( sch, view, desc )',
    'desc',
    '',
    ''
);

SELECT tap.check_test(
    tap.has_security_invoker('taptest', 'myView', ''),
    false,
    'has_security_invoker( sch, view with wrong security )',
    'View taptest.myView should have security INVOKER',
    '',
    ''
);

SELECT tap.check_test(
    tap.has_security_invoker('taptest', '__adfafsadf__', ''),
    false,
    'has_security_invoker( sch, non existent view )',
    'Error #     View taptest.__adfafsadf__ does not exist',
    '',
    ''
);

/****************************************************************************/
-- Test has_security_definer

SELECT tap.check_test(
    tap.has_security_definer('taptest', 'myView', ''),
    true,
    'has_security_definer( sch, view )',
    'View taptest.myView should have security DEFINER',
    '',
    ''
);

SELECT tap.check_test(
    tap.has_security_definer('taptest', 'myView', 'desc'),
    true,
    'has_security_definer( sch, view, desc )',
    'desc',
    '',
    ''
);

SELECT tap.check_test(
    tap.has_security_definer('taptest', 'invokerView', ''),
    false,
    'has_security_definer( sch, view with wrong security )',
    'View taptest.invokerView should have security DEFINER',
    '',
    ''
);

SELECT tap.check_test(
    tap.has_security_definer('taptest', '__adfafsadf__', ''),
    false,
    'has_security_definer( sch, non existent view )',
    'Error #     View taptest.__adfafsadf__ does not exist',
    '',
    ''
);

/****************************************************************************/
-- Finish the tests and clean up.
call tap.finish();
DROP DATABASE IF EXISTS taptest;

ROLLBACK;