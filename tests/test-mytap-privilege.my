/*
TAP Tests for database privileges 
*/

BEGIN;

SELECT tap.plan(208);

CREATE DATABASE IF NOT EXISTS taptest;
CREATE DATABASE IF NOT EXISTS secondary;
CREATE TABLE IF NOT EXISTS taptest.priv_table(a INT, b INT);
DROP PROCEDURE IF EXISTS taptest.priv_routine;
CREATE PROCEDURE taptest.priv_routine() SELECT 1;

-- clean up user accounts
DELIMITER //
DROP PROCEDURE IF EXISTS taptest.dropusers //
CREATE PROCEDURE taptest.dropusers()
DETERMINISTIC
BEGIN
  -- This procedure is only here in the event that the tests
  -- fail due to a syntax error in which case IF EXISTS (> 5.6) will not work to tidy up
  -- extant user records
  IF (SELECT COUNT(*) FROM mysql.user WHERE user = '__usage__' AND host = '%') > 0 THEN
    DROP USER '__usage__'@'%';
  END IF;
  IF (SELECT COUNT(*) FROM mysql.user WHERE user = '__global__' AND host = '%') > 0 THEN
    DROP USER '__global__'@'%';
  END IF;
  IF (SELECT COUNT(*) FROM mysql.user WHERE user = '__schema__' AND host = '%') > 0 THEN
    DROP USER '__schema__'@'%';
  END IF;
  IF (SELECT COUNT(*) FROM mysql.user WHERE user = '__table__' AND host = '%') > 0 THEN
    DROP USER '__table__'@'%';
  END IF;
  IF (SELECT COUNT(*) FROM mysql.user WHERE user = '__column__' AND host = '%') > 0 THEN
    DROP USER '__column__'@'%';
  END IF;
  IF (SELECT COUNT(*) FROM mysql.user WHERE user = '__routine__' AND host = '%') > 0 THEN
    DROP USER '__routine__'@'%';
  END IF;
  IF (SELECT COUNT(*) FROM mysql.user WHERE user = '__double__' AND host = '%') > 0 THEN
    DROP USER '__double__'@'%';
  END IF;
  IF (SELECT COUNT(*) FROM mysql.user WHERE user = '__rollup__' AND host = '%') > 0 THEN
    DROP USER '__rollup__'@'%';
  END IF;
END //

DELIMITER ;

CALL taptest.dropusers();
DROP PROCEDURE IF EXISTS taptest.dropusers;

CREATE USER '__usage__'@'%' IDENTIFIED BY 'dfgkdhgfjka'; -- no grant required
CREATE USER '__global__'@'%' IDENTIFIED BY 'dfgkdhgfjka';
CREATE USER '__schema__'@'%' IDENTIFIED BY 'dfgkdhgfjka';
CREATE USER '__table__'@'%' IDENTIFIED BY 'dfgkdhgfjka';
CREATE USER '__column__'@'%' IDENTIFIED BY 'dfgkdhgfjka';
CREATE USER '__routine__'@'%' IDENTIFIED BY 'dfgkdhgfjka';
CREATE USER '__double__'@'%' IDENTIFIED BY 'dfgkdhgfjka';
CREATE USER '__rollup__'@'%' IDENTIFIED BY 'dfgkdhgfjka';

GRANT FILE, SELECT ON *.* TO '__global__'@'%';
GRANT FILE ON *.* TO '__schema__'@'%';
GRANT SELECT, INSERT, ALTER ON taptest.* TO '__schema__'@'%';
GRANT SELECT, UPDATE ON taptest.priv_table TO '__table__'@'%';
GRANT SELECT(a) ON taptest.priv_table TO '__column__'@'%';
-- NB documentation bug in MySQL suggests this next is a table level privilege, it isn't
GRANT EXECUTE ON PROCEDURE taptest.priv_routine TO '__routine__'@'%' WITH GRANT OPTION; 
GRANT SELECT, INSERT, ALTER ON taptest.* TO '__double__'@'%';
GRANT SELECT, INSERT, ALTER ON secondary.* TO '__double__'@'%';
GRANT SELECT, EXECUTE ON *.* TO '__rollup__'@'%';

/****************************************************************************/
-- has_privilege(gtee VARCHAR(81), ptype VARCHAR(64), description TEXT)

SELECT tap.check_test(
    tap.has_privilege('__usage__@%', 'USAGE', ''),
    true,
    'has_privilege() extant priv',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.has_privilege('__usage__@%', 'SELECT', ''),
    false,
    'has_privilege() nonexistent priv',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.has_privilege('__nonexistent__@%', 'DROP',''),
    false,
    'has_privilege() nonexistent user diagnostic',
    null,
    'Account __nonexistent__@% does not exist',
    0
);

SELECT tap.check_test(
    tap.has_privilege('__global__@%', 'FILE', ''),
    true,
    'has_privilege() default description',
    'Account __global__@% should have privilege \'FILE\'',
    null,
    0
);

SELECT tap.check_test(
    tap.has_privilege('__global__@%', 'FILE', 'desc'),
    true,
    'has_privilege() description supplied',
    'desc',
    null,
    0
);


/****************************************************************************/
-- hasnt_privilege(gtee VARCHAR(81), ptype VARCHAR(64), description TEXT)

SELECT tap.check_test(
    tap.hasnt_privilege('__usage__@%', 'SELECT', ''),
    true,
    'hasnt_privilege() nonexistent priv',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.hasnt_privilege('__usage__@%', 'USAGE', ''),
    false,
    'hasnt_privilege() extant priv',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.hasnt_privilege('__nonexistent__@%', 'SELECT',''),
    false,
    'hasnt_privilege() nonexistent user diagnostic',
    null,
    'Account __nonexistent__@% does not exist',
    0
);

SELECT tap.check_test(
    tap.hasnt_privilege('__global__@%', 'SUPER', ''),
    true,
    'hasnt_privilege() default description',
    'Account __global__@% should not have privilege \'SUPER\'',
    null,
    0
);

SELECT tap.check_test(
    tap.hasnt_privilege('__global__@%', 'SUPER', 'desc'),
    true,
    'hasnt_privilege() description supplied',
    'desc',
    null,
    0
);


/****************************************************************************/
-- has_global_privilege(gtee VARCHAR(81), ptype VARCHAR(64), description TEXT)

SELECT tap.check_test(
    tap.has_global_privilege('__global__@%', 'FILE', ''),
    true,
    'has_global_privilege() extant priv',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.has_global_privilege('__global__@%', 'DROP', ''),
    false,
    'has_global_privilege() nonexistent priv',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.has_global_privilege('__nonexistent__@%', 'SELECT',''),
    false,
    'has_global_privilege() nonexistent user diagnostic',
    null,
    'Account __nonexistent__@% does not exist',
    0
);

SELECT tap.check_test(
    tap.has_global_privilege('__global__@%', 'IDONOTEXIST',''),
    false,
    'has_global_privilege() nonexistent privilege diagnostic',
    null,
    'Privilege ''IDONOTEXIST'' is not a valid global privilege type',
    0
);

SELECT tap.check_test(
    tap.has_global_privilege('__global__@%', 'FILE', ''),
    true,
    'has_global_privilege() default description',
    'Account __global__@% should have global privilege \'FILE\'',
    null,
    0
);

SELECT tap.check_test(
    tap.has_global_privilege('__global__@%', 'FILE', 'desc'),
    true,
    'has_global_privilege() description supplied',
    'desc',
    null,
    0
);


/****************************************************************************/
-- hasnt_global_privilege(gtee VARCHAR(81), ptype VARCHAR(64), description TEXT)

SELECT tap.check_test(
    tap.hasnt_global_privilege('__global__@%', 'DROP', ''),
    true,
    'hasnt_global_privilege() nonexistent priv',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.hasnt_global_privilege('__global__@%', 'FILE', ''),
    false,
    'hasnt_global_privilege() extant priv',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.hasnt_global_privilege('__nonexistent__@%', 'SELECT',''),
    false,
    'hasnt_global_privilege() nonexistent user diagnostic',
    null,
    'Account __nonexistent__@% does not exist',
    0
);

SELECT tap.check_test(
    tap.hasnt_global_privilege('__global__@%', 'IDONOTEXIST',''),
    false,
    'hasnt_global_privilege() nonexistent privilege diagnostic',
    null,
    'Privilege ''IDONOTEXIST'' is not a valid global privilege type',
    0
);

SELECT tap.check_test(
    tap.hasnt_global_privilege('__global__@%', 'DROP', ''),
    true,
    'hasnt_global_privilege() default description',
    'Account __global__@% should not have global privilege \'DROP\'',
    null,
    0
);

SELECT tap.check_test(
    tap.hasnt_global_privilege('__global__@%', 'DROP', 'desc'),
    true,
    'hasnt_global_privilege() description supplied',
    'desc',
    null,
    0
);


/****************************************************************************/
-- has_schema_privilege(sname VARCHAR(64), gtee VARCHAR(81), ptype VARCHAR(64), description TEXT)

SELECT tap.check_test(
    tap.has_schema_privilege('taptest','__schema__@%', 'SELECT', ''),
    true,
    'has_schema_privilege() extant priv',
    null,
    null,
    0
);

SET @rollup=1;
SELECT tap.check_test(
    tap.has_schema_privilege('taptest','__rollup__@%', 'SELECT', ''),
    true,
    'has_schema_privilege() rollup test',
    null,
    null,
    0
);
SET @rollup=0;

SELECT tap.check_test(
    tap.has_schema_privilege('taptest', '__schema__@%', 'DROP', ''),
    false,
    'has_schema_privilege() nonexistent priv',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.has_schema_privilege('taptest', '__nonexistent__@%', 'SELECT',''),
    false,
    'has_schema_privilege() nonexistent user diagnostic',
    null,
    'Account __nonexistent__@% does not exist',
    0
);

SELECT tap.check_test(
    tap.has_schema_privilege('__doesnotexist__', '__schema__@%', 'SELECT',''),
    false,
    'has_schema_privilege() nonexistent schema diagnostic',
    null,
    'Schema __doesnotexist__ does not exist',
    0
);

SELECT tap.check_test(
    tap.has_schema_privilege('taptest', '__schema__@%', 'IDONOTEXIST',''),
    false,
    'has_schema_privilege() nonexistent privilege diagnostic',
    null,
    'Privilege ''IDONOTEXIST'' is not a valid schema privilege type',
    0
);

SELECT tap.check_test(
    tap.has_schema_privilege('taptest', '__schema__@%', 'UPDATE', ''),
    false,
    'has_schema_privilege() default description',
    'Account __schema__@% should have schema privilege \'UPDATE\'',
    null,
    0
);

SELECT tap.check_test(
    tap.has_schema_privilege('taptest', '__schema__@%', 'SELECT', 'desc'),
    true,
    'has_schema_privilege() description supplied',
    'desc',
    null,
    0
);


/****************************************************************************/
-- hasnt_schema_privilege(sname VARCHAR(64), gtee VARCHAR(81), ptype VARCHAR(64), description TEXT)

SELECT tap.check_test(
    tap.hasnt_schema_privilege('taptest','__schema__@%', 'UPDATE', ''),
    true,
    'hasnt_schema_privilege() extant priv',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.hasnt_schema_privilege('taptest', '__schema__@%', 'SELECT', ''),
    false,
    'hasnt_schema_privilege() nonexistent priv',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.hasnt_schema_privilege('taptest', '__nonexistent__@%', 'SELECT',''),
    false,
    'hasnt_schema_privilege() nonexistent user diagnostic',
    null,
    'Account __nonexistent__@% does not exist',
    0
);

SELECT tap.check_test(
    tap.hasnt_schema_privilege('__doesnotexist__', '__schema__@%', 'SELECT',''),
    false,
    'hasnt_schema_privilege() nonexistent schema diagnostic',
    null,
    'Schema __doesnotexist__ does not exist',
    0
);

SELECT tap.check_test(
    tap.hasnt_schema_privilege('taptest', '__schema__@%', 'IDONOTEXIST',''),
    false,
    'hasnt_schema_privilege() nonexistent privilege diagnostic',
    null,
    'Privilege ''IDONOTEXIST'' is not a valid schema privilege type',
    0
);

SELECT tap.check_test(
    tap.hasnt_schema_privilege('taptest', '__schema__@%', 'SELECT', ''),
    false,
    'hasnt_schema_privilege() default description',
    'Account __schema__@% should not have schema privilege \'SELECT\'',
    null,
    0
);

SELECT tap.check_test(
    tap.hasnt_schema_privilege('taptest', '__schema__@%', 'UPDATE', 'desc'),
    true,
    'hasnt_schema_privilege() description supplied',
    'desc',
    null,
    0
);

/****************************************************************************/
-- has_table_privilege(sname VARCHAR(64), tname VARCHAR(64), gtee VARCHAR(81), ptype VARCHAR(64), description TEXT)

SELECT tap.check_test(
    tap.has_table_privilege('taptest', 'priv_table', '__table__@%', 'SELECT', ''),
    true,
    'has_table_privilege() extant priv',
    null,
    null,
    0
);

SET @rollup=1;
SELECT tap.check_test(
    tap.has_table_privilege('taptest', 'priv_table', '__rollup__@%', 'SELECT', ''),
    true,
    'has_table_privilege() rollup test',
    null,
    null,
    0
);
SET @rollup=0;



SELECT tap.check_test(
    tap.has_table_privilege('taptest', 'priv_table', '__table__@%', 'DELETE', ''),
    false,
    'has_table_privilege() nonexistent priv',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.has_table_privilege('taptest', 'priv_table', '__nonexistent__@%', 'SELECT',''),
    false,
    'has_table_privilege() nonexistent user diagnostic',
    null,
    'Account __nonexistent__@% does not exist',
    0
);

SELECT tap.check_test(
    tap.has_table_privilege('taptest', '__doesnotexist__', '__table__@%', 'SELECT',''),
    false,
    'has_table_privilege() nonexistent table diagnostic',
    null,
    'Table `taptest`.`__doesnotexist__` does not exist',
    0
);

SELECT tap.check_test(
    tap.has_table_privilege('taptest', 'priv_table', '__table__@%', 'IDONOTEXIST',''),
    false,
    'has_table_privilege() nonexistent privilege diagnostic',
    null,
    'Privilege ''IDONOTEXIST'' is not a valid table privilege type',
    0
);

SELECT tap.check_test(
    tap.has_table_privilege('taptest', 'priv_table', '__table__@%', 'DELETE', ''),
    false,
    'has_table_privilege() default description',
    'Account __table__@% should have table privilege \'DELETE\'',
    null,
    0
);

SELECT tap.check_test(
    tap.has_table_privilege('taptest', 'priv_table', '__table__@%', 'SELECT', 'desc'),
    true,
    'has_table_privilege() description supplied',
    'desc',
    null,
    0
);


/****************************************************************************/
-- hasnt_table_privilege(sname VARCHAR(64), tname VARCHAR(64), gtee VARCHAR(81), ptype VARCHAR(64), description TEXT)

SELECT tap.check_test(
    tap.hasnt_table_privilege('taptest', 'priv_table', '__table__@%', 'DELETE', ''),
    true,
    'hasnt_table_privilege() nonexistent priv',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.hasnt_table_privilege('taptest', 'priv_table', '__table__@%', 'SELECT', ''),
    false,
    'hasnt_table_privilege() nonexistent priv',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.hasnt_table_privilege('taptest', 'priv_table', '__nonexistent__@%', 'SELECT',''),
    false,
    'hasnt_table_privilege() nonexistent user diagnostic',
    null,
    'Account __nonexistent__@% does not exist',
    0
);

SELECT tap.check_test(
    tap.hasnt_table_privilege('taptest', '__doesnotexist__', '__table__@%', 'SELECT',''),
    false,
    'hasnt_table_privilege() nonexistent table diagnostic',
    null,
    'Table `taptest`.`__doesnotexist__` does not exist',
    0
);

SELECT tap.check_test(
    tap.hasnt_table_privilege('taptest', 'priv_table', '__table__@%', 'IDONOTEXIST',''),
    false,
    'hasnt_table_privilege() nonexistent privilege diagnostic',
    null,
    'Privilege ''IDONOTEXIST'' is not a valid table privilege type',
    0
);

SELECT tap.check_test(
    tap.hasnt_table_privilege('taptest', 'priv_table', '__table__@%', 'DELETE', ''),
    true,
    'hasnt_table_privilege() default description',
    'Account __table__@% should not have table privilege \'DELETE\'',
    null,
    0
);

SELECT tap.check_test(
    tap.hasnt_table_privilege('taptest', 'priv_table', '__table__@%', 'SELECT', 'desc'),
    false,
    'hasnt_table_privilege() description supplied',
    'desc',
    null,
    0
);

/****************************************************************************/
-- has_column_privilege(sname VARCHAR(64), tname VARCHAR(64), cname VARCHAR(64), gtee VARCHAR(81), ptype VARCHAR(64), description TEXT)

SELECT tap.check_test(
    tap.has_column_privilege('taptest', 'priv_table', 'a' , '__column__@%', 'SELECT', ''),
    true,
    'has_column_privilege() extant priv',
    null,
    null,
    0
);

SET @rollup=1;
SELECT tap.check_test(
    tap.has_column_privilege('taptest', 'priv_table', 'a', '__rollup__@%', 'SELECT', ''),
    true,
    'has_column_privilege() rollup test',
    null,
    null,
    0
);
SET @rollup=0;

SELECT tap.check_test(
    tap.has_column_privilege('taptest', 'priv_table', 'b', '__column__@%', 'SELECT', ''),
    false,
    'has_column_privilege() column no priv',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.has_column_privilege('taptest', 'priv_table', 'a', '__column__@%', 'DELETE', ''),
    false,
    'has_column_privilege() nonexistent priv',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.has_column_privilege('taptest', 'priv_table', 'a', '__nonexistent__@%', 'SELECT',''),
    false,
    'has_column_privilege() nonexistent user diagnostic',
    null,
    'Account __nonexistent__@% does not exist',
    0
);

SELECT tap.check_test(
    tap.has_column_privilege('taptest', 'priv_table', '__doesnotexist__', '__column__@%', 'SELECT',''),
    false,
    'has_column_privilege() nonexistent column diagnostic',
    null,
    'Column `priv_table`.`__doesnotexist__` does not exist',
    0
);

SELECT tap.check_test(
    tap.has_column_privilege('taptest', 'priv_table', 'a', '__column__@%', 'IDONOTEXIST',''),
    false,
    'has_column_privilege() nonexistent privilege diagnostic',
    null,
    'Privilege ''IDONOTEXIST'' is not a valid column privilege type',
    0
);

SELECT tap.check_test(
    tap.has_column_privilege('taptest', 'priv_table', 'a', '__column__@%', 'DELETE', ''),
    false,
    'has_column_privilege() default description',
    'Account __column__@% should have column privilege \'DELETE\'',
    null,
    0
);

SELECT tap.check_test(
    tap.has_column_privilege('taptest', 'priv_table', 'a', '__column__@%', 'SELECT', 'desc'),
    true,
    'has_column_privilege() description supplied',
    'desc',
    null,
    0
);


/****************************************************************************/
-- hasnt_column_privilege(sname VARCHAR(64), tname VARCHAR(64), cname VARCHAR(64), gtee VARCHAR(81), ptype VARCHAR(64), description TEXT)

SELECT tap.check_test(
    tap.hasnt_column_privilege('taptest', 'priv_table', 'a', '__column__@%', 'UPDATE', ''),
    true,
    'hasnt_column_privilege() nonexistent priv',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.hasnt_column_privilege('taptest', 'priv_table', 'b', '__column__@%', 'SELECT', ''),
    true,
    'hasnt_column_privilege() column no priv',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.hasnt_column_privilege('taptest', 'priv_table', 'a', '__column__@%', 'SELECT', ''),
    false,
    'hasnt_column_privilege() extant priv',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.hasnt_column_privilege('taptest', 'priv_table', 'a', '__nonexistent__@%', 'SELECT',''),
    false,
    'hasnt_column_privilege() nonexistent user diagnostic',
    null,
    'Account __nonexistent__@% does not exist',
    0
);

SELECT tap.check_test(
    tap.hasnt_column_privilege('taptest', 'priv_table', '__doesnotexist__', '__column__@%', 'SELECT',''),
    false,
    'hasnt_column_privilege() nonexistent column diagnostic',
    null,
    'Column `priv_table`.`__doesnotexist__` does not exist',
    0
);

SELECT tap.check_test(
    tap.hasnt_column_privilege('taptest', 'priv_table', 'a', '__column__@%', 'IDONOTEXIST',''),
    false,
    'hasnt_column_privilege() nonexistent privilege diagnostic',
    null,
    'Privilege ''IDONOTEXIST'' is not a valid column privilege type',
    0
);

SELECT tap.check_test(
    tap.hasnt_column_privilege('taptest', 'priv_table', 'a', '__column__@%', 'UPDATE', ''),
    true,
    'hasnt_column_privilege() default description',
    'Account __column__@% should not have column privilege \'UPDATE\'',
    null,
    0
);

SELECT tap.check_test(
    tap.hasnt_column_privilege('taptest', 'priv_table', 'a', '__column__@%', 'SELECT', 'desc'),
    false,
    'hasnt_column_privilege() description supplied',
    'desc',
    null,
    0
);

/****************************************************************************/
-- global_privileges_are(gtee VARCHAR(81), ptypes TEXT, description TEXT)

SELECT tap.check_test(
    tap.global_privileges_are('__global__', '`FILE`,`SELECT`', ''),
    true,
    'global_privileges_are() correct specification',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.global_privileges_are('__global__', 'FILE,SELECT', ''),
    true,
    'global_privileges_are() correct specification no backticks',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.global_privileges_are('__global__@%', '`FILE`,`CREATE`', ''),
    false,
    'global_privileges_are() incorrect specification',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.global_privileges_are('__idonotexist__@%', 'FILE,SELECT', ''),
    false,
    'global_privileges_are() invalid user diagnostic',
    null,
    'Account __idonotexist__@% does not exist',
    0
);


-- Note the diagnostic test here is dependent on the space after the hash
-- and before the line feed and the number of spaces before
-- the table names, which must = 7
SELECT tap.check_test(
    tap.global_privileges_are('__global__@%', '`FILE`,`CREATE`', ''),
    false,
    'global_privileges_are() diagnostic',
    null,
    '# 
    Extra global privileges:
       `SELECT`
    Missing global privileges:
       `CREATE`',
    0
);

SELECT tap.check_test(
    tap.global_privileges_are('__global__@%', '`FILE`,`SELECT`', ''),
    true,
    'global_privileges_are() default description',
    'Account __global__@% should have the correct global privileges',
    null,
    0
);

SELECT tap.check_test(
    tap.global_privileges_are('__global__@%',  '`FILE`,`SELECT`', 'desc'),
    true,
    'global_privileges_are() description supplied',
    'desc',
    null,
    0
);



/****************************************************************************/

-- schema_privileges_are(sname VARCHAR(64), gtee VARCHAR(81), ptypes TEXT, description TEXT)
-- NB CREATE and FILE privs at the global level for this account but only CREATE is a schema level priv.

SELECT tap.check_test(
    tap.schema_privileges_are('taptest', '__schema__', '`SELECT`,`INSERT`,`ALTER`', ''),
    true,
    'schema_privileges_are() correct specification',
    null,
    null,
    0
);

SET @rollup=1;
SELECT tap.check_test(
    tap.schema_privileges_are('taptest', '__rollup__@%', 'SELECT,EXECUTE', ''),
    true,
    'schema_privileges_are() rollup test',
    null,
    null,
    0
);
SET @rollup=0;

SELECT tap.check_test(
    tap.schema_privileges_are('taptest', '__schema__', 'SELECT,INSERT,ALTER', ''),
    true,
    'schema_privileges_are() correct specification no backticks',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.schema_privileges_are('taptest', '__schema__', '`FILE`,`SELECT`,`INSERT`,`ALTER`', ''),
    false,
    'schema_privileges_are() incorrect specification non-schema level global priv included',
    null,
    null,
    0
);


SELECT tap.check_test(
    tap.schema_privileges_are('taptest', '__schema__@%', '`FILE`,`SELECT`,`INSERT`,`ALTER`,`DELETE`', ''),
    false,
    'schema_privileges_are() incorrect specification incl. schema level priv',
    null,
    null,
    0
);

-- Note the diagnostic test here is dependent on the space after the hash
-- and before the line feed and the number of spaces before
-- the table names, which must = 7

-- Also, this account has file privilege which is a GLOBAL and not a schema privilege
-- so it shouldn't be picked up
SELECT tap.check_test(
    tap.schema_privileges_are('taptest', '__schema__@%', '`SELECT`,`INSERT`,`DELETE`', ''),
    false,
    'schema_privileges_are() diagnostic',
    null,
    '# 
    Extra schema privileges:
       `ALTER`
    Missing schema privileges:
       `DELETE`',
    0
);

SELECT tap.check_test(
    tap.schema_privileges_are('taptest', '__schema__@%',  '`SELECT`,`INSERT`,`ALTER`', ''),
    true,
    'schema_privileges_are() default description',
    'Account __schema__@% should have the correct schema privileges',
    null,
    0
);

SELECT tap.check_test(
    tap.schema_privileges_are('idonotexist', '__schema__@%', 'SELECT,INSERT,ALTER', ''),
    false,
    'schema_privileges_are() invalid schema diagnostic',
    null,
    'Schema idonotexist does not exist',
    0
);

SELECT tap.check_test(
    tap.schema_privileges_are('taptest', '__idonotexist__@%', 'SELECT,INSERT,ALTER', ''),
    false,
    'schema_privileges_are() invalid user diagnostic',
    null,
    'Account __idonotexist__@% does not exist',
    0
);


SELECT tap.check_test(
    tap.schema_privileges_are('taptest', '__schema__@%',  '`SELECT`,`INSERT`,`ALTER`', 'desc'),
    true,
    'schema_privileges_are() description supplied',
    'desc',
    null,
    0
);

SELECT tap.check_test(
    tap.schema_privileges_are('taptest', '__schema__@%',  '`SELECT`,`INSERT`,`ALTER`', ''),
    true,
    'schema_privileges_are() change priv order',
    null,
    null,
    0
);


/****************************************************************************/
-- table_privileges_are(sname VARCHAR(64), tname VARCHAR(64), gtee VARCHAR(81), ptypes TEXT, description TEXT)

SELECT tap.check_test(
    tap.table_privileges_are('taptest', 'priv_table', '__table__', '`SELECT`,`UPDATE`', ''),
    true,
    'table_privileges_are() correct specification',
    null,
    null,
    0
);

SET @rollup=1;
SELECT tap.check_test(
    tap.table_privileges_are('taptest', 'priv_table', '__rollup__@%', 'SELECT', ''),
    true,
    'table_privileges_are() rollup test',
    null,
    null,
    0
);
SET @rollup=0;

SELECT tap.check_test(
    tap.table_privileges_are('taptest', 'priv_table', '__table__', 'SELECT,UPDATE', ''),
    true,
    'table_privileges_are() correct specification no backticks',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.table_privileges_are('taptest', 'priv_table', '__table__', '`SELECT`,`INSERT`', ''),
    false,
    'table_privileges_are() incorrect specification',
    null,
    null,
    0
);


SELECT tap.check_test(
    tap.table_privileges_are('taptest', 'priv_table', '__table__@%', '`CREATE`,`SELECT`,`INSERT`,`ALTER`,`DELETE`', ''),
    false,
    'table_privileges_are() incorrect specification with table level priv',
    null,
    null,
    0
);

-- Note the diagnostic test here is dependent on the space after the hash
-- and before the line feed and the number of spaces before
-- the table names, which must = 7

SELECT tap.check_test(
    tap.table_privileges_are('taptest', 'priv_table', '__table__@%', '`CREATE`,`SELECT`', ''),
    false,
    'table_privileges_are() diagnostic',
    null,
    '# 
    Extra table privileges:
       `UPDATE`
    Missing table privileges:
       `CREATE`',
    0
);

SELECT tap.check_test(
    tap.table_privileges_are('taptest', 'priv_table', '__table__@%', '`SELECT`,`UPDATE`', ''),
    true,
    'table_privileges_are() default description',
    'Account __table__@% should have the correct table privileges',
    null,
    0
);

SELECT tap.check_test(
    tap.table_privileges_are('taptest', 'priv_table', '__table__@%', '`SELECT`,`UPDATE`', 'desc'),
    true,
    'table_privileges_are() description supplied',
    'desc',
    null,
    0
);

SELECT tap.check_test(
    tap.table_privileges_are('taptest', 'idonotexist', '__table__@%', '`SELECT`,`UPDATE`', ''),
    false,
    'table_privileges_are() table not found diagnostic',
    null,
    'Table `taptest`.`idonotexist` does not exist',
    0
);

SELECT tap.check_test(
    tap.table_privileges_are('taptest', 'priv_table', '__idonotexist__@%', '`SELECT`,`UPDATE`', ''),
    false,
    'table_privileges_are() user not found diagnostic',
    null,
    'Account __idonotexist__@% does not exist',
    0
);

SELECT tap.check_test(
    tap.table_privileges_are('taptest', 'priv_table', '__table__@%',  '`UPDATE`,`SELECT`', ''),
    true,
    'table_privileges_are() change priv order',
    null,
    null,
    0
);


/****************************************************************************/
-- column_privileges_are(sname VARCHAR(64), tname VARCHAR(64), cname VARCHAR(64), gtee VARCHAR(81), ptypes TEXT, description TEXT)

SELECT tap.check_test(
    tap.column_privileges_are('taptest', 'priv_table', 'a', '__column__', '`SELECT`', ''),
    true,
    'column_privileges_are() correct specification',
    null,
    null,
    0
);

SET @rollup=1;
SELECT tap.check_test(
    tap.column_privileges_are('taptest', 'priv_table', 'a', '__rollup__@%', 'SELECT', ''),
    true,
    'column_privileges_are() rollup test',
    null,
    null,
    0
);
SET @rollup=0;

SELECT tap.check_test(
    tap.column_privileges_are('taptest', 'priv_table', 'a', '__column__', 'SELECT', ''),
    true,
    'column_privileges_are() correct specification no backticks',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.column_privileges_are('taptest', 'priv_table', 'a', '__column__', '`SELECT`,`REFERENCES`', ''),
    false,
    'column_privileges_are() incorrect specification',
    null,
    null,
    0
);

-- Note the diagnostic test here is dependent on the space after the hash
-- and before the line feed and the number of spaces before
-- the column names, which must = 7

SELECT tap.check_test(
    tap.column_privileges_are('taptest', 'priv_table', 'a', '__column__@%', '`UPDATE`,`SELECT`', ''),
    false,
    'column_privileges_are() diagnostic',
    null,
    '#     Missing column privileges:
       `UPDATE`',
    0
);

SELECT tap.check_test(
    tap.column_privileges_are('taptest', 'priv_table', 'a', '__column__@%', '`SELECT`,`UPDATE`', ''),
    false,
    'column_privileges_are() default description',
    'Account __column__@% should have the correct column privileges',
    null,
    0
);

SELECT tap.check_test(
    tap.column_privileges_are('taptest', 'priv_table', 'a', '__column__@%', '`SELECT`', 'desc'),
    true,
    'column_privileges_are() description supplied',
    'desc',
    null,
    0
);

SELECT tap.check_test(
    tap.column_privileges_are('taptest', 'priv_table', 'idonotexist', '__column__@%', '`SELECT`', ''),
    false,
    'column_privileges_are() column not found diagnostic',
    null,
    'Column `priv_table`.`idonotexist` does not exist',
    0
);

SELECT tap.check_test(
    tap.column_privileges_are('taptest', 'priv_table', 'a', '__idonotexist__@%', '`SELECT`', ''),
    false,
    'column_privileges_are() user not found diagnostic',
    null,
    'Account __idonotexist__@% does not exist',
    0
);


/****************************************************************************/
-- routine_privileges_are(sname VARCHAR(64), rtype VARCHAR(9), rname VARCHAR(64), gtee VARCHAR(81), ptypes TEXT, description TEXT)

SELECT tap.check_test(
    tap.routine_privileges_are('taptest', 'PROCEDURE', 'priv_routine', '__routine__', '`EXECUTE`,`GRANT`', ''),
    true,
    'routine_privileges_are() correct specification',
    null,
    null,
    0
);

SET @rollup=1;
SELECT tap.check_test(
    tap.routine_privileges_are('taptest', 'PROCEDURE', 'priv_routine', '__rollup__@%', 'EXECUTE', ''),
    true,
    'routine_privileges_are() rollup test',
    null,
    null,
    0
);
SET @rollup=0;


SELECT tap.check_test(
    tap.routine_privileges_are('taptest', 'PROCEDURE', 'priv_routine', '__routine__', 'EXECUTE,GRANT', ''),
    true,
    'routine_privileges_are() correct specification no backticks',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.routine_privileges_are('taptest', 'PROCEDURE', 'priv_routine', '__routine__', '`EXECUTE`,`ALTER ROUTINE`', ''),
    false,
    'routine_privileges_are() incorrect specification',
    null,
    null,
    0
);


SELECT tap.check_test(
    tap.routine_privileges_are('taptest', 'PROCEDURE', 'priv_routine', '__routine__@%', '`EXECUTE`,`ALTER ROUTINE`', ''),
    false,
    'routine_privileges_are() incorrect specification with routine level priv',
    null,
    null,
    0
);

-- Note the diagnostic test here is dependent on the space after the hash
-- and before the line feed and the number of spaces before
-- the privileges, which must = 7

SELECT tap.check_test(
    tap.routine_privileges_are('taptest', 'PROCEDURE', 'priv_routine', '__routine__@%', '`EXECUTE`,`ALTER ROUTINE`', ''),
    false,
    'routine_privileges_are() diagnostic',
    null,
    '# 
    Extra routine privileges:
       `GRANT`
    Missing routine privileges:
       `ALTER ROUTINE`',
    0
);

SELECT tap.check_test(
    tap.routine_privileges_are('taptest', 'PROCEDURE', 'priv_routine', '__routine__@%', '`EXECUTE`,`GRANT`', ''),
    true,
    'routine_privileges_are() default description',
    'Account __routine__@% should have the correct routine privileges',
    null,
    0
);

SELECT tap.check_test(
    tap.routine_privileges_are('taptest', 'PROCEDURE', 'priv_routine', '__routine__@%', '`EXECUTE`,`GRANT`', 'desc'),
    true,
    'routine_privileges_are() description supplied',
    'desc',
    null,
    0
);

SELECT tap.check_test(
    tap.routine_privileges_are('taptest', 'PROCEDURE', 'idonotexist', '__routine__@%', '`EXECUTE`,`GRANT`', ''),
    false,
    'routine_privileges_are() routine not found diagnostic',
    null,
    'Procedure `taptest`.`idonotexist` does not exist',
    0
);

SELECT tap.check_test(
    tap.routine_privileges_are('taptest', 'PROCEDURE', 'priv_routine', '__idonotexist__@%', '`EXECUTE`,`GRANT`', ''),
    false,
    'routine_privileges_are() user not found diagnostic',
    null,
    'Account __idonotexist__@% does not exist',
    0
);

SELECT tap.check_test(
    tap.routine_privileges_are('taptest', 'PROCEDURE', 'priv_routine', '__routine__@%',  '`GRANT`,`EXECUTE`', ''),
    true,
    'routine_privileges_are() change priv order',
    null,
    null,
    0
);


/****************************************************************************/
-- single_schema_privileges(sname VARCHAR(64), gtee VARCHAR(81), description TEXT)

SELECT tap.check_test(
    tap.single_schema_privileges('taptest', '__schema__', ''),
    true,
    'single_schema_privileges() correct specification',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.single_schema_privileges('taptest', '__double__', ''),
    false,
    'single_schema_privileges() two schema access',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.single_schema_privileges('taptest', '__global__', ''),
    false,
    'single_schema_privileges() global schema privileges',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.single_schema_privileges('taptest', '__schema__@%', ''),
    true,
    'single_schema_privileges() default description',
    'Account __schema__@% should have privileges on a single schema',
    null,
    0
);

SELECT tap.check_test(
    tap.single_schema_privileges('taptest', '__schema__', 'desc'),
    true,
    'single_schema_privileges() description supplied',
    'desc',
    null,
    0
);

SELECT tap.check_test(
    tap.single_schema_privileges('idonotexist', '__schema__', ''),
    false,
    'single_schema_privileges() schema not found diagnostic',
    null,
    'Schema `idonotexist` does not exist',
    0
);

SELECT tap.check_test(
    tap.single_schema_privileges('taptest', '__idonotexist__@%', ''),
    false,
    'single_schema_privileges() user not found diagnostic',
    null,
    'Account __idonotexist__@% does not exist',
    0
);


/****************************************************************************/
-- single_table_privileges(sname VARCHAR(64), tname VARCHAR(64), gtee VARCHAR(81), description TEXT)

SELECT tap.check_test(
    tap.single_table_privileges('taptest', 'priv_table', '__table__', ''),
    true,
    'single_table_privileges() correct specification',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.single_table_privileges('taptest', 'priv_table', '__double__', ''),
    false,
    'single_table_privileges() two table access',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.single_table_privileges('taptest', 'priv_table', '__global__', ''),
    false,
    'single_table_privileges() global table privileges',
    null,
    null,
    0
);

SELECT tap.check_test(
    tap.single_table_privileges('taptest', 'priv_table', '__table__@%', ''),
    true,
    'single_table_privileges() default description',
    'Account __table__@% should have privileges on a single table',
    null,
    0
);

SELECT tap.check_test(
    tap.single_table_privileges('taptest', 'priv_table', '__table__', 'desc'),
    true,
    'single_table_privileges() description supplied',
    'desc',
    null,
    0
);

SELECT tap.check_test(
    tap.single_table_privileges('taptest', 'idonotexist','__table__', ''),
    false,
    'single_table_privileges() table not found diagnostic',
    null,
    'Table `taptest`.`idonotexist` does not exist',
    0
);

SELECT tap.check_test(
    tap.single_table_privileges('taptest', 'priv_table', '__idonotexist__@%', ''),
    false,
    'single_table_privileges() user not found diagnostic',
    null,
    'Account __idonotexist__@% does not exist',
    0
);


/****************************************************************************/

-- Finish the tests and clean up.

call tap.finish();

DROP USER __usage__;
DROP USER __global__;
DROP USER __schema__;
DROP USER __table__;
DROP USER __column__;
DROP USER __routine__;
DROP USER __double__;
DROP USER __rollup__;
DROP PROCEDURE taptest.priv_routine;
DROP TABLE taptest.priv_table;
DROP DATABASE taptest;
DROP DATABASE secondary;
ROLLBACK;
