-- source ../mytap-column.sql;

BEGIN;

SELECT tap.plan(210);
-- SELECT * from no_plan();

DROP DATABASE IF EXISTS taptest;
CREATE DATABASE taptest;

-- This will be rolled back. :-)
DROP TABLE IF EXISTS taptest.sometab;
CREATE TABLE taptest.sometab(
    id      INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    uint    INT(5) UNSIGNED,
    name    TEXT DEFAULT '',
    numb    FLOAT(10, 2) DEFAULT NULL,
    myNum   INT(8) DEFAULT 24,
    myat    TIMESTAMP DEFAULT NOW() ON UPDATE CURRENT_TIMESTAMP,
    mydate  DATE DEFAULT '0000-00-00',
    plain   INT,
    KEY `WeirdIndexName` (`myNum`)
);

/****************************************************************************/
-- Test has_column
SELECT tap.check_test(
	tap.has_column('taptest', 'sometab', 'id', '' ),
	true,
	'has_column( sch, tab, col )',
	'Column sometab.id should exist',
	'',
	''
);

use taptest;
SELECT tap.check_test(
	tap.has_column( database(), 'sometab', 'id', ''),
	true,
	'has_column( current database, tab, col )',
	'Column sometab.id should exist',
	'',
	''
);

use tap;

-- Make sure nonexisting column is correctly detected
SELECT tap.check_test(
	tap.has_column('taptest', 'sometab', 'foo', ''),
	false,
	'has_column( sch, tab, non existing col )',
	'Column sometab.foo should exist',
	'',
	''
);

SELECT tap.check_test(
  tap.has_column('taptest', 'sometab', 'name', 'my own description'),
  true,
  'has_column( sch, tab, col, desc )',
  'my own description',
  '',
  ''
);

/****************************************************************************/
-- Test hasnt_column
SELECT tap.check_test(
	tap.hasnt_column('taptest', 'sometab', 'foo', ''),
	true,
	'hasnt_column( sch, tab, non existing col )',
	'Column sometab.foo should not exist',
	'',
	''
);

use taptest;
SELECT tap.check_test(
	tap.hasnt_column( database(), 'sometab', 'foo', ''),
	true,
	'hasnt_column( current database, tab, non existing col )',
	'Column sometab.foo should not exist',
	'',
	''
);

use tap;

-- Make sure existing column is correctly handled
SELECT tap.check_test(
	tap.hasnt_column('taptest', 'sometab', 'name', ''),
	false,
	'hasnt_column( sch, tab, existing col )',
	'Column sometab.name should not exist',
	'',
	''
);

SELECT tap.check_test(
  tap.hasnt_column('taptest', 'sometab', 'foo', 'my own description'),
  true,
  'hasnt_column( sch, tab, col, desc )',
  'my own description',
  '',
  ''
);


/****************************************************************************/
-- Test col_not_null().

SELECT tap.check_test(
    tap.col_not_null( 'taptest', 'sometab', 'id', '' ),
    true,
    'col_not_null( sch, tab, col not null )',
    'Column sometab.id should not allow NULL',
    '',
    ''
);

use taptest;
SELECT tap.check_test(
    tap.col_not_null(database(), 'sometab', 'id', '' ),
    true,
    'col_not_null( current database, tab, col not null )',
    'Column sometab.id should not allow NULL',
    '',
    ''
);
use tap;

-- Make sure failure is correct.
SELECT tap.check_test(
    tap.col_not_null('taptest', 'sometab', 'name', '' ),
    false,
    'col_not_null(sch, table, col allow null ) fail',
    'Column sometab.name should not allow NULL',
    '',
    ''
);

-- Make sure nonexisting column is correct
SELECT tap.check_test(
    tap.col_not_null( 'taptest', 'sometab', 'foo', '' ),
    false,
    'col_not_null( sch, tab, non existing col )',
    'Error #     Column taptest.sometab.foo does not exist',
    '',
    ''
);

-- Make sure failure is correct.
SELECT tap.check_test(
    tap.col_not_null('taptest', 'sometab', 'id', 'my own description' ),
    true,
    'col_not_null( sch, tab, col not null, descr )',
    'my own description',
    '',
    ''
);

-- Make sure nonexisting column is correct, description is ignored
SELECT tap.check_test(
    tap.col_not_null( 'taptest', 'sometab', 'foo', 'my own description' ),
    false,
    'col_not_null( sch, tab, non existing col, ignore descr )',
    'Error #     Column taptest.sometab.foo does not exist',
    '',
    ''
);

/****************************************************************************/
-- Test col_is_null

SELECT tap.check_test(
    tap.col_is_null( 'taptest', 'sometab', 'name', '' ),
    true,
    'col_is_null( sch, tab, col allow null)',
    'Column sometab.name should allow NULL',
    '',
    ''
);

use taptest;
SELECT tap.check_test(
    tap.col_is_null( database(), 'sometab', 'name', '' ),
    true,
    'col_is_null( current database, tab, col allow null )',
    'Column sometab.name should allow NULL',
    '',
    ''
);
use tap;


-- Make sure failure is correct.
SELECT tap.check_test(
    tap.col_is_null('taptest', 'sometab', 'id', '' ),
    false,
    'col_is_null(sch, tab, col not null ) fail',
    'Column sometab.id should allow NULL',
    '',
    ''
);

-- Make sure nonexisting column is correct
SELECT tap.check_test(
    tap.col_is_null( 'taptest', 'sometab', 'foo', '' ),
    false,
    'col_is_null( sch, tab, non existing col )',
    'Error #     Column taptest.sometab.foo does not exist',
    '',
    ''
);

SELECT tap.check_test(
    tap.col_is_null( 'taptest', 'sometab', 'name', 'my description' ),
    true,
    'col_is_null( sch, tab, col allow null)',
    'my description',
    '',
    ''
);

/****************************************************************************/
-- Test col_has_primary_key

SELECT tap.check_test(
    tap.col_has_primary_key( 'taptest', 'sometab', 'id', '' ),
    true,
    'col_has_primary_key( sch, tab, col has primary key)',
    'Column sometab.id should have primary key',
    '',
    ''
);

SELECT tap.check_test(
    tap.col_has_primary_key( 'taptest', 'sometab', 'id', 'my own description' ),
    true,
    'col_has_primary_key( sch, tab, col has primary key, descr)',
    'my own description',
    '',
    ''
);

use taptest;
SELECT tap.check_test(
    tap.col_has_primary_key( database(), 'sometab', 'id', '' ),
    true,
    'col_has_primary_key( current database, tab, col has primary key)',
    'Column sometab.id should have primary key',
    '',
    ''
);
use tap;


-- Make sure failure is correct.
SELECT tap.check_test(
    tap.col_has_primary_key( 'taptest', 'sometab', 'name', '' ),
    false,
    'col_has_primary_key( sch, tab, col without any key)',
    'Column sometab.name should have primary key',
    '',
    ''
);


-- Make sure nonexisting column is correctly detected
SELECT tap.check_test(
    tap.col_has_primary_key( 'taptest', 'sometab', 'foo', '' ),
    false,
    'col_has_primary_key( sch, tab, non existing col )',
    'Error #     Column taptest.sometab.foo does not exist',
    '',
    ''
);

-- Make sure index key is correctly detected as non-primary
SELECT tap.check_test(
    tap.col_has_primary_key( 'taptest', 'sometab', 'myNum','' ),
    false,
    'col_has_primary_key( sch, tab, col has index key)',
    'Column sometab.myNum should have primary key',
    '',
    ''
);

/****************************************************************************/
-- Test col_hasnt_primary_key

SELECT tap.check_test(
    tap.col_hasnt_primary_key( 'taptest', 'sometab', 'name', '' ),
    true,
    'col_hasnt_primary_key( sch, tab, col has not primary key)',
    'Column sometab.name should not have PRIMARY key',
    '',
    ''
);

SELECT tap.check_test(
    tap.col_hasnt_primary_key( 'taptest', 'sometab', 'name', 'my own description' ),
    true,
    'col_hasnt_primary_key( sch, tab, col has not primary key, descr)',
    'my own description',
    '',
    ''
);

use taptest;
SELECT tap.check_test(
    tap.col_hasnt_primary_key( database(), 'sometab', 'name' , ''),
    true,
    'col_hasnt_primary_key( current database, tab, col has not primary key)',
    'Column sometab.name should not have PRIMARY key',
    '',
    ''
);
use tap;


-- Make sure failure is correct.
SELECT tap.check_test(
    tap.col_hasnt_primary_key( 'taptest', 'sometab', 'id', '' ),
    false,
    'col_hasnt_primary_key( sch, tab, col with primary key)',
    'Column sometab.id should not have PRIMARY key',
    '',
    ''
);


-- Make sure nonexisting column is correctly detected
SELECT tap.check_test(
    tap.col_hasnt_primary_key( 'taptest', 'sometab', 'foo' , '' ),
    false,
    'col_hasnt_primary_key( sch, tab, non existing col )',
    'Error #     Column taptest.sometab.foo does not exist',
    '',
    ''
);

-- Make sure index key is correctly detected as non-primary
SELECT tap.check_test(
    tap.col_hasnt_primary_key( 'taptest', 'sometab', 'myNum', '' ),
    true,
    'col_hasnt_primary_key( sch, tab, col has index key)',
    'Column sometab.myNum should not have PRIMARY key',
    '',
    ''
);

/****************************************************************************/
-- Test col_has_index_key

SELECT tap.check_test(
    tap.col_has_index_key( 'taptest', 'sometab', 'myNum', '' ),
    true,
    'col_has_index_key( sch, tab, col has index key)',
    'Column sometab.myNum should have index key',
    '',
    ''
);

SELECT tap.check_test(
    tap.col_has_index_key( 'taptest', 'sometab', 'myNum', 'my own description' ),
    true,
    'col_has_index_key( sch, tab, col has index key)',
    'my own description',
    '',
    ''
);

use taptest;
SELECT tap.check_test(
    tap.col_has_index_key( database(), 'sometab', 'myNum', '' ),
    true,
    'col_has_index_key( current database, tab, col has index key)',
    'Column sometab.myNum should have index key',
    '',
    ''
);
use tap;


-- Make sure failure is correct.
SELECT tap.check_test(
    tap.col_has_index_key( 'taptest', 'sometab', 'name', '' ),
    false,
    'col_has_index_key( sch, tab, col without any key)',
    'Column sometab.name should have index key',
    '',
    ''
);


-- Make sure nonexisting column is correctly detected
SELECT tap.check_test(
    tap.col_has_index_key( 'taptest', 'sometab', 'foo', '' ),
    false,
    'col_has_index_key( sch, tab, non existing col )',
    'Error #     Column taptest.sometab.foo does not exist',
    '',
    ''
);

-- Make sure primary key is correctly detected as non-index
SELECT tap.check_test(
    tap.col_has_index_key( 'taptest', 'sometab', 'id', '' ),
    false,
    'col_has_index_key( sch, tab, col has primary key)',
    'Column sometab.id should have index key',
    '',
    ''
);

/****************************************************************************/

-- Test col_hasnt_index_key

SELECT tap.check_test(
    tap.col_hasnt_index_key( 'taptest', 'sometab', 'name', '' ),
    true,
    'col_hasnt_index_key( sch, tab, col has not index key)',
    'Column sometab.name should not have index key',
    '',
    ''
);

SELECT tap.check_test(
    tap.col_hasnt_index_key( 'taptest', 'sometab', 'name', 'my own description' ),
    true,
    'col_hasnt_index_key( sch, tab, col has not index key, descr )',
    'my own description',
    '',
    ''
);

use taptest;
SELECT tap.check_test(
    tap.col_hasnt_index_key( database(), 'sometab', 'name', '' ),
    true,
    'col_hasnt_index_key( current database, tab, col has no key)',
    'Column sometab.name should not have index key',
    '',
    ''
);
use tap;


-- Make sure failure is correct.
SELECT tap.check_test(
    tap.col_hasnt_index_key( 'taptest', 'sometab', 'myNum', '' ),
    false,
    'col_hasnt_index_key( sch, tab, col with index key)',
    'Column sometab.myNum should not have index key',
    '',
    ''
);


-- Make sure nonexisting column is correctly detected
SELECT tap.check_test(
    tap.col_hasnt_index_key( 'taptest', 'sometab', 'foo', '' ),
    false,
    'col_hasnt_index_key( sch, tab, non existing col )',
    'Error #     Column taptest.sometab.foo does not exist',
    '',
    ''
);

-- Make sure primary key is correctly detected as non-index
SELECT tap.check_test(
    tap.col_hasnt_index_key( 'taptest', 'sometab', 'id', '' ),
    true,
    'col_hasnt_index_key( sch, tab, col has index key)',
    'Column sometab.id should not have INDEX key',
    '',
    ''
);

/****************************************************************************/

-- Test col_has_type

SELECT tap.check_test(
    tap.col_has_type( 'taptest', 'sometab', 'name', 'TEXT', '' ),
    true,
    'col_has_type( sch, tab, col, type )',
    'Column sometab.name should have type `TEXT`',
    '',
    ''
);

SELECT tap.check_test(
    tap.col_has_type( 'taptest', 'sometab', 'name', 'TEXT', 'mydescription' ),
    true,
    'col_has_type( sch, tab, col, type, descr )',
    'mydescription',
    '',
    ''
);

SELECT tap.check_test(
    tap.col_has_type( 'taptest', 'sometab', 'numb', 'float', '' ),
    false,
    'col_has_type( sch, tab, col, wrong type )',
    'Column sometab.numb should have type `float`',
    '',
    ''
);

SELECT tap.check_test(
    tap.col_has_type( 'taptest', 'sometab', 'numb', 'float(10,2)', '' ),
    true,
    'col_has_type( sch, tab, col, type with precision )',
    'Column sometab.numb should have type float(10,2)',
    '',
    ''
);

SELECT tap.check_test(
    tap.col_has_type( 'taptest', 'sometab', 'uint', 'int', '' ),
    false,
    'col_has_type( sch, tab, col, wrong type )',
    'Column sometab.uint should have type `int`',
    '',
    ''
);

SELECT tap.check_test(
    tap.col_has_type( 'taptest', 'sometab', 'uint', 'int(5) unsigned', '' ),
    true,
    'col_has_type( sch, tab, col, type unsigned )',
    'Column sometab.uint should have type int(5) unsigned',
    '',
    ''
);

-- Make sure nonexisting column is correctly detected
SELECT tap.check_test(
    tap.col_has_type( 'taptest', 'sometab', 'foo', 'TEXT' , '' ),
    false,
    'col_has_type( sch, tab, non existing col, type )',
    'Error #     Column taptest.sometab.foo does not exist',
    '',
    ''
);

/****************************************************************************/

-- Test col_has_default().

-- empty strings are handled as NULL values, so considered 'no default'!

SELECT tap.check_test(
    col_has_default( 'taptest', 'sometab', 'name', 'desc' ),
    false,
    'col_has_default( sch, tab, col with empty string, desc )',
    'desc',
    '',
    ''
);

SELECT tap.check_test(
    col_has_default( 'taptest', 'sometab', 'name', '' ),
    false,
    'col_has_default( sch, tab, col with empty string, no desc )',
    'Column sometab.name should have a default',
    '',
    ''
);

-- Check with a column with no default.
SELECT tap.check_test(
    col_has_default( 'taptest', 'sometab', 'myNum', 'desc' ),
    true,
    'col_has_default( sch, tab, col, desc )',
    'desc',
    '',
    ''
);

-- Check with a nonexistent column.
SELECT tap.check_test(
    col_has_default( 'taptest', 'sometab', '__asdfasdfs__', '' ),
    false,
    'col_has_default( sch, tab, non existent col, no desc )',
    'Error #     Column taptest.sometab.__asdfasdfs__ does not exist',
    '',
    ''
);

/****************************************************************************/
-- Test col_hasnt_default().

-- empty strings are handled as NULL values, so considered 'no default'

SELECT tap.check_test(
    col_hasnt_default( 'taptest', 'sometab', 'name', 'desc' ),
    true,
    'col_hasnt_default( sch, tab, col empty string, desc )',
    'desc',
    '',
    ''
);

SELECT tap.check_test(
    col_hasnt_default( 'taptest', 'sometab', 'myNum', '' ),
    false,
    'col_hasnt_default( sch, tab, col default, no desc )',
    'Column sometab.myNum should not have a default',
    '',
    ''
);

-- Check with a column with no default.
SELECT tap.check_test(
    col_hasnt_default( 'taptest', 'sometab', 'plain', 'desc' ),
    true,
    'col_hasnt_default( sch, tab, col no default, desc )',
    'desc',
    '',
    ''
);

-- Check with a column with NULL as default.
SELECT tap.check_test(
    col_hasnt_default( 'taptest', 'sometab', 'numb', '' ),
    true,
    'col_hasnt_default( sch, tab, col NULL default, desc )',
    'Column sometab.numb should not have a default',
    '',
    ''
);

-- Check with a nonexistent column.
SELECT tap.check_test(
    col_hasnt_default( 'taptest', 'sometab', '__asdfasdfs__', 'desc' ),
    false,
    'col_hasnt_default( sch, tab, non existent col, desc )',
    'Error #     Column taptest.sometab.__asdfasdfs__ does not exist',
    '',
    ''
);

/****************************************************************************/
-- Test col_default_is().

SELECT tap.check_test(
    col_default_is( 'taptest', 'sometab', 'name', '', 'name should default to empty string' ),
    true,
    'col_default_is( sch, tab, col, empty string def, desc )',
    'name should default to empty string',
    '',
    ''
);

SELECT tap.check_test(
    col_default_is( 'taptest', 'sometab', 'name', 'foo', 'name should default to ''foo''' ),
    false,
    'col_default_is() fail',
    'name should default to ''foo''',
    '',
    ''
);

SELECT tap.check_test(
    col_default_is( 'taptest', 'sometab', 'mydate', '0000-00-00', 'mydate should default to 0000-00-00' ),
    true,
    'col_default_is( sch, tab, col, zero date def, desc )',
    'mydate should default to 0000-00-00',
    '',
    ''
);


-- Make sure that it works when the default is an expression.
-- Note: MySQL converts 'now()' to 'CURRENT_TIMESTAMP'

SELECT tap.check_test(
    col_default_is( 'taptest', 'sometab', 'myat', 'CURRENT_TIMESTAMP', '' ),
    true,
    'col_default_is( sch, tab, col, expression )',
    'Column sometab.myat should have as default `CURRENT_TIMESTAMP`',
    '',
    ''
);

-- Check with NULL as default
SELECT tap.check_test(
    col_default_is( 'taptest', 'sometab', 'numb', NULL, 'desc' ),
    true,
    'col_default_is( sch, tab, col, null def, desc )',
    'desc',
    '',
    ''
);


-- Check with a nonexistent column.
SELECT tap.check_test(
    col_default_is( 'taptest', 'sometab', '__asdfasdfs__', NULL, 'desc' ),
    false,
    'col_default_is( sch, tab, non existent col, def, desc )',
    'Error #     Column taptest.sometab.__asdfasdfs__ does not exist',
    '',
    ''
);

/****************************************************************************/
-- Test col_extra_is()

SELECT tap.check_test(
    col_extra_is( 'taptest', 'sometab', 'id', 'AUTO_INCREMENT', 'desc'),
    true,
    'col_extra_is( sch, tab, col, extra, desc )',
    'desc',
    '',
    ''
);

SELECT tap.check_test(
    col_extra_is( 'taptest', 'sometab', 'name', '', 'desc'),
    true,
    'col_extra_is( sch, tab, col, empty extra, desc )',
    'desc',
    '',
    ''
);

SELECT tap.check_test(
    col_extra_is( 'taptest', 'sometab', 'name', NULL, 'desc'),
    true,
    'col_extra_is( sch, tab, col, null extra, desc )',
    'desc',
    '',
    ''
);

SELECT tap.check_test(
    col_extra_is( 'taptest', 'sometab', 'name', 'foo', 'desc'),
    false,
    'col_extra_is( sch, tab, col, wrong extra, desc )',
    'desc',
    '',
    ''
);

-- Check with a nonexistent column.
SELECT tap.check_test(
    col_extra_is( 'taptest', 'sometab', '__asdfasdfs__', NULL, 'desc' ),
    false,
    'col_extra_is( sch, tab, non existent col, def, desc )',
    'Error #     Column taptest.sometab.__asdfasdfs__ does not exist',
    '',
    ''
);

/****************************************************************************/
-- Finish the tests and clean up.
call tap.finish();
DROP DATABASE IF EXISTS taptest;

ROLLBACK;
