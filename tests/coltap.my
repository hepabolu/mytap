-- source ../mytap-column.sql;

BEGIN;

SELECT tap.plan(150);
-- SELECT * from no_plan();

DROP DATABASE IF EXISTS taptest;
CREATE DATABASE taptest;

-- This will be rolled back. :-)
DROP TABLE IF EXISTS taptest.sometab;
CREATE TABLE taptest.sometab(
    id      INT NOT NULL PRIMARY KEY,
    uint    INT(5) UNSIGNED,
    name    TEXT DEFAULT '',
    numb    FLOAT(10, 2) DEFAULT NULL,
    myNum   INT(8) DEFAULT 24,
    myat    TIMESTAMP DEFAULT NOW(),
    plain   INT,
    KEY `WeirdIndexName` (`myNum`)
);

/****************************************************************************/
-- Test has_column
SELECT tap.check_test(
	tap.has_column('taptest', 'sometab', 'id', '' ),
	true,
	'has_column( sch, tab, col )',
	'Column sometab.id should exist',
	'',
	''
);

use taptest;
SELECT tap.check_test(
	tap.has_column( database(), 'sometab', 'id', ''),
	true,
	'has_column( current database, tab, col )',
	'Column sometab.id should exist',
	'',
	''
);

use tap;

-- Make sure nonexisting column is correctly detected
SELECT tap.check_test(
	tap.has_column('taptest', 'sometab', 'foo', ''),
	false,
	'has_column( sch, tab, non existing col )',
	'Column sometab.foo should exist',
	'',
	''
);

SELECT tap.check_test(
  tap.has_column('taptest', 'sometab', 'name', 'my own description'),
  true,
  'has_column( sch, tab, col, desc )',
  'my own description',
  '',
  ''
);

/****************************************************************************/
-- Test hasnt_column
SELECT tap.check_test(
	tap.hasnt_column('taptest', 'sometab', 'foo', ''),
	true,
	'hasnt_column( sch, tab, non existing col )',
	'Column sometab.foo should not exist',
	'',
	''
);

use taptest;
SELECT tap.check_test(
	tap.hasnt_column( database(), 'sometab', 'foo', ''),
	true,
	'hasnt_column( current database, tab, non existing col )',
	'Column sometab.foo should not exist',
	'',
	''
);

use tap;

-- Make sure existing column is correctly handled
SELECT tap.check_test(
	tap.hasnt_column('taptest', 'sometab', 'name', ''),
	false,
	'hasnt_column( sch, tab, existing col )',
	'Column sometab.name should not exist',
	'',
	''
);

SELECT tap.check_test(
  tap.hasnt_column('taptest', 'sometab', 'foo', 'my own description'),
  true,
  'hasnt_column( sch, tab, col, desc )',
  'my own description',
  '',
  ''
);


/****************************************************************************/
-- Test col_not_null().

SELECT tap.check_test(
    tap.col_not_null( 'taptest', 'sometab', 'id', '' ),
    true,
    'col_not_null( sch, tab, col not null )',
    'Column sometab.id should not allow NULL',
    '',
    ''
);

use taptest;
SELECT tap.check_test(
    tap.col_not_null(database(), 'sometab', 'id', '' ),
    true,
    'col_not_null( current database, tab, col not null )',
    'Column sometab.id should not allow NULL',
    '',
    ''
);
use tap;

-- Make sure failure is correct.
SELECT tap.check_test(
    tap.col_not_null('taptest', 'sometab', 'name', '' ),
    false,
    'col_not_null(sch, table, col allow null ) fail',
    'Column sometab.name should not allow NULL',
    '',
    ''
);

-- Make sure nonexisting column is correct
SELECT tap.check_test(
    tap.col_not_null( 'taptest', 'sometab', 'foo', '' ),
    false,
    'col_not_null( sch, tab, non existing col )',
    'Error #     Column taptest.sometab.foo does not exist',
    '',
    ''
);

-- Make sure failure is correct.
SELECT tap.check_test(
    tap.col_not_null('taptest', 'sometab', 'id', 'my own description' ),
    true,
    'col_not_null( sch, tab, col not null, descr )',
    'my own description',
    '',
    ''
);

-- Make sure nonexisting column is correct, description is ignored
SELECT tap.check_test(
    tap.col_not_null( 'taptest', 'sometab', 'foo', 'my own description' ),
    false,
    'col_not_null( sch, tab, non existing col, ignore descr )',
    'Error #     Column taptest.sometab.foo does not exist',
    '',
    ''
);

/****************************************************************************/
-- Test col_is_null

SELECT tap.check_test(
    tap.col_is_null( 'taptest', 'sometab', 'name', '' ),
    true,
    'col_is_null( sch, tab, col allow null)',
    'Column sometab.name should allow NULL',
    '',
    ''
);

use taptest;
SELECT tap.check_test(
    tap.col_is_null( database(), 'sometab', 'name', '' ),
    true,
    'col_is_null( current database, tab, col allow null )',
    'Column sometab.name should allow NULL',
    '',
    ''
);
use tap;


-- Make sure failure is correct.
SELECT tap.check_test(
    tap.col_is_null('taptest', 'sometab', 'id', '' ),
    false,
    'col_is_null(sch, tab, col not null ) fail',
    'Column sometab.id should allow NULL',
    '',
    ''
);

-- Make sure nonexisting column is correct
SELECT tap.check_test(
    tap.col_is_null( 'taptest', 'sometab', 'foo', '' ),
    false,
    'col_is_null( sch, tab, non existing col )',
    'Error #     Column taptest.sometab.foo does not exist',
    '',
    ''
);

SELECT tap.check_test(
    tap.col_is_null( 'taptest', 'sometab', 'name', 'my description' ),
    true,
    'col_is_null( sch, tab, col allow null)',
    'my description',
    '',
    ''
);

/****************************************************************************/
-- Test col_has_primary_key

SELECT tap.check_test(
    tap.col_has_primary_key( 'taptest', 'sometab', 'id', '' ),
    true,
    'col_has_primary_key( sch, tab, col has primary key)',
    'Column sometab.id should have primary key',
    '',
    ''
);

SELECT tap.check_test(
    tap.col_has_primary_key( 'taptest', 'sometab', 'id', 'my own description' ),
    true,
    'col_has_primary_key( sch, tab, col has primary key, descr)',
    'my own description',
    '',
    ''
);

use taptest;
SELECT tap.check_test(
    tap.col_has_primary_key( database(), 'sometab', 'id', '' ),
    true,
    'col_has_primary_key( current database, tab, col has primary key)',
    'Column sometab.id should have primary key',
    '',
    ''
);
use tap;


-- Make sure failure is correct.
SELECT tap.check_test(
    tap.col_has_primary_key( 'taptest', 'sometab', 'name', '' ),
    false,
    'col_has_primary_key( sch, tab, col without any key)',
    'Column sometab.name should have primary key',
    '',
    ''
);


-- Make sure nonexisting column is correctly detected
SELECT tap.check_test(
    tap.col_has_primary_key( 'taptest', 'sometab', 'foo', '' ),
    false,
    'col_has_primary_key( sch, tab, non existing col )',
    'Error #     Column taptest.sometab.foo does not exist',
    '',
    ''
);

-- Make sure index key is correctly detected as non-primary
SELECT tap.check_test(
    tap.col_has_primary_key( 'taptest', 'sometab', 'myNum','' ),
    false,
    'col_has_primary_key( sch, tab, col has index key)',
    'Column sometab.myNum should have primary key',
    '',
    ''
);

/****************************************************************************/
-- Test col_hasnt_primary_key

SELECT tap.check_test(
    tap.col_hasnt_primary_key( 'taptest', 'sometab', 'name', '' ),
    true,
    'col_hasnt_primary_key( sch, tab, col has not primary key)',
    'Column sometab.name should not have PRIMARY key',
    '',
    ''
);

SELECT tap.check_test(
    tap.col_hasnt_primary_key( 'taptest', 'sometab', 'name', 'my own description' ),
    true,
    'col_hasnt_primary_key( sch, tab, col has not primary key, descr)',
    'my own description',
    '',
    ''
);

use taptest;
SELECT tap.check_test(
    tap.col_hasnt_primary_key( database(), 'sometab', 'name' , ''),
    true,
    'col_hasnt_primary_key( current database, tab, col has not primary key)',
    'Column sometab.name should not have PRIMARY key',
    '',
    ''
);
use tap;


-- Make sure failure is correct.
SELECT tap.check_test(
    tap.col_hasnt_primary_key( 'taptest', 'sometab', 'id', '' ),
    false,
    'col_hasnt_primary_key( sch, tab, col with primary key)',
    'Column sometab.id should not have PRIMARY key',
    '',
    ''
);


-- Make sure nonexisting column is correctly detected
SELECT tap.check_test(
    tap.col_hasnt_primary_key( 'taptest', 'sometab', 'foo' , '' ),
    false,
    'col_hasnt_primary_key( sch, tab, non existing col )',
    'Error #     Column taptest.sometab.foo does not exist',
    '',
    ''
);

-- Make sure index key is correctly detected as non-primary
SELECT tap.check_test(
    tap.col_hasnt_primary_key( 'taptest', 'sometab', 'myNum', '' ),
    true,
    'col_hasnt_primary_key( sch, tab, col has index key)',
    'Column sometab.myNum should not have PRIMARY key',
    '',
    ''
);

/****************************************************************************/
-- Test col_has_index_key

SELECT tap.check_test(
    tap.col_has_index_key( 'taptest', 'sometab', 'myNum', '' ),
    true,
    'col_has_index_key( sch, tab, col has index key)',
    'Column sometab.myNum should have index key',
    '',
    ''
);

SELECT tap.check_test(
    tap.col_has_index_key( 'taptest', 'sometab', 'myNum', 'my own description' ),
    true,
    'col_has_index_key( sch, tab, col has index key)',
    'my own description',
    '',
    ''
);

use taptest;
SELECT tap.check_test(
    tap.col_has_index_key( database(), 'sometab', 'myNum', '' ),
    true,
    'col_has_index_key( current database, tab, col has index key)',
    'Column sometab.myNum should have index key',
    '',
    ''
);
use tap;


-- Make sure failure is correct.
SELECT tap.check_test(
    tap.col_has_index_key( 'taptest', 'sometab', 'name', '' ),
    false,
    'col_has_index_key( sch, tab, col without any key)',
    'Column sometab.name should have index key',
    '',
    ''
);


-- Make sure nonexisting column is correctly detected
SELECT tap.check_test(
    tap.col_has_index_key( 'taptest', 'sometab', 'foo', '' ),
    false,
    'col_has_index_key( sch, tab, non existing col )',
    'Error #     Column taptest.sometab.foo does not exist',
    '',
    ''
);

-- Make sure primary key is correctly detected as non-index
SELECT tap.check_test(
    tap.col_has_index_key( 'taptest', 'sometab', 'id', '' ),
    false,
    'col_has_index_key( sch, tab, col has primary key)',
    'Column sometab.id should have index key',
    '',
    ''
);

/****************************************************************************/

-- Test col_hasnt_index_key

SELECT tap.check_test(
    tap.col_hasnt_index_key( 'taptest', 'sometab', 'name', '' ),
    true,
    'col_hasnt_index_key( sch, tab, col has not index key)',
    'Column sometab.name should not have index key',
    '',
    ''
);

SELECT tap.check_test(
    tap.col_hasnt_index_key( 'taptest', 'sometab', 'name', 'my own description' ),
    true,
    'col_hasnt_index_key( sch, tab, col has not index key, descr )',
    'my own description',
    '',
    ''
);

use taptest;
SELECT tap.check_test(
    tap.col_hasnt_index_key( database(), 'sometab', 'name', '' ),
    true,
    'col_hasnt_index_key( current database, tab, col has no key)',
    'Column sometab.name should not have index key',
    '',
    ''
);
use tap;


-- Make sure failure is correct.
SELECT tap.check_test(
    tap.col_hasnt_index_key( 'taptest', 'sometab', 'myNum', '' ),
    false,
    'col_hasnt_index_key( sch, tab, col with index key)',
    'Column sometab.myNum should not have index key',
    '',
    ''
);


-- Make sure nonexisting column is correctly detected
SELECT tap.check_test(
    tap.col_hasnt_index_key( 'taptest', 'sometab', 'foo', '' ),
    false,
    'col_hasnt_index_key( sch, tab, non existing col )',
    'Error #     Column taptest.sometab.foo does not exist',
    '',
    ''
);

-- Make sure primary key is correctly detected as non-index
SELECT tap.check_test(
    tap.col_hasnt_index_key( 'taptest', 'sometab', 'id', '' ),
    true,
    'col_hasnt_index_key( sch, tab, col has index key)',
    'Column sometab.id should not have INDEX key',
    '',
    ''
);

/****************************************************************************/

-- Test col_has_type

SELECT tap.check_test(
    tap.col_has_type( 'taptest', 'sometab', 'name', 'TEXT', '' ),
    true,
    'col_has_type( sch, tab, col, type )',
    'Column sometab.name should have type `TEXT`',
    '',
    ''
);

SELECT tap.check_test(
    tap.col_has_type( 'taptest', 'sometab', 'name', 'TEXT', 'mydescription' ),
    true,
    'col_has_type( sch, tab, col, type, descr )',
    'mydescription',
    '',
    ''
);

SELECT tap.check_test(
    tap.col_has_type( 'taptest', 'sometab', 'numb', 'float', '' ),
    false,
    'col_has_type( sch, tab, col, wrong type )',
    'Column sometab.numb should have type `float`',
    '',
    ''
);

SELECT tap.check_test(
    tap.col_has_type( 'taptest', 'sometab', 'numb', 'float(10,2)', '' ),
    true,
    'col_has_type( sch, tab, col, type with precision )',
    'Column sometab.numb should have type float(10,2)',
    '',
    ''
);

SELECT tap.check_test(
    tap.col_has_type( 'taptest', 'sometab', 'uint', 'int', '' ),
    false,
    'col_has_type( sch, tab, col, wrong type )',
    'Column sometab.uint should have type `int`',
    '',
    ''
);

SELECT tap.check_test(
    tap.col_has_type( 'taptest', 'sometab', 'uint', 'int(5) unsigned', '' ),
    true,
    'col_has_type( sch, tab, col, type unsigned )',
    'Column sometab.uint should have type int(5) unsigned',
    '',
    ''
);

-- Make sure nonexisting column is correctly detected
SELECT tap.check_test(
    tap.col_has_type( 'taptest', 'sometab', 'foo', 'TEXT' , '' ),
    false,
    'col_has_type( sch, tab, non existing col, type )',
    'Error #     Column taptest.sometab.foo does not exist',
    '',
    ''
);

/****************************************************************************/
-- Finish the tests and clean up.
call tap.finish();
DROP DATABASE IF EXISTS taptest;

ROLLBACK;
